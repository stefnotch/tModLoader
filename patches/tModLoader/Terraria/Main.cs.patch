--- src/Terraria\Terraria\Main.cs
+++ src/tModLoader\Terraria\Main.cs
@@ -29,7 +_,9 @@
 using System.Runtime.InteropServices;
 using System.Text;
 using System.Threading;
+#if WINDOWS
 using System.Windows.Forms;
+#endif
 using Terraria.Achievements;
 using Terraria.Audio;
 using Terraria.Chat;
@@ -54,6 +_,9 @@
 using Terraria.IO;
 using Terraria.Localization;
 using Terraria.Map;
+using Terraria.ModLoader;
+using Terraria.ModLoader.Audio;
+using Terraria.ModLoader.IO;
 using Terraria.Net;
 using Terraria.ObjectData;
 using Terraria.Social;
@@ -77,7 +_,7 @@
 	{
 		public delegate void OnPlayerSelected(PlayerFileData player);
 
-		public const int curRelease = 193;
+		public const int curRelease = 194;
 		public const ulong WorldGeneratorVersion = 828928688129uL;
 		private const string versionStringBecauseTheyreTheSame = "v1.3.5.2";
 		public const int offLimitBorderTiles = 40;
@@ -166,13 +_,13 @@
 		public static Main instance;
 		public static string versionNumber = "v1.3.5.2";
 		public static string versionNumber2 = "v1.3.5.2";
-		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : Platform.Current.GetStoragePath("Terraria");
+		public static string SavePath = Program.LaunchParameters.ContainsKey("-savedirectory") ? Program.LaunchParameters["-savedirectory"] : Platform.Current.GetStoragePath("Terraria/ModLoader");
 		public static bool AnnouncementBoxDisabled = false;
 		public static int AnnouncementBoxRange = -1;
 		public static string AutogenSeedName;
 		public static Vector2 destroyerHB = new Vector2(0f, 0f);
 		public static FavoritesFile LocalFavoriteData = new FavoritesFile(Main.SavePath + "/favorites.json", false);
-		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/favorites.json", true);
+		public static FavoritesFile CloudFavoritesData = new FavoritesFile("/ModLoader/favorites.json", true);
 		public static FileMetadata WorldFileMetadata;
 		public static FileMetadata MapFileMetadata;
 		private AchievementManager _achievements;
@@ -211,11 +_,13 @@
 		public static bool UseHeatDistortion = true;
 		public static int npcStreamSpeed = 60;
 		public static int musicError = 0;
+		public static int soundError = 0;
+		public static int ambientError = 0;
 		public static bool dedServFPS = false;
 		public static int dedServCount1 = 0;
 		public static int dedServCount2 = 0;
 		public static bool superFast = false;
-		public static int MaxShopIDs = 22;
+		public static int MaxShopIDs = 22 + 1;
 		public static bool[] hairLoaded = new bool[134];
 		public static bool[] wingsLoaded = new bool[40];
 		public static bool[] goreLoaded = new bool[1087];
@@ -462,13 +_,13 @@
 		public static int wofB;
 		public static int wofF = 0;
 		public static int offScreenRange = 200;
-		private RenderTarget2D backWaterTarget;
+		public RenderTarget2D backWaterTarget;
 		public static RenderTarget2D waterTarget;
-		private RenderTarget2D tileTarget;
-		private RenderTarget2D blackTarget;
-		private RenderTarget2D tile2Target;
-		private RenderTarget2D wallTarget;
-		private RenderTarget2D backgroundTarget;
+		public RenderTarget2D tileTarget;
+		public RenderTarget2D blackTarget;
+		public RenderTarget2D tile2Target;
+		public RenderTarget2D wallTarget;
+		public RenderTarget2D backgroundTarget;
 		public static RenderTarget2D screenTarget;
 		public static RenderTarget2D screenTargetSwap;
 		public static int maxMapUpdates = 250000;
@@ -492,8 +_,8 @@
 		private static bool flameRingLoaded;
 		private Texture2D flameRingTexture;
 		private Texture2D mapDeathTexture;
-		private RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];
-		private RenderTarget2D mapSectionTexture;
+		public RenderTarget2D[,] mapTarget = new RenderTarget2D[Main.mapTargetX, Main.mapTargetY];
+		public RenderTarget2D mapSectionTexture;
 		public static bool[,] initMap = new bool[Main.mapTargetX, Main.mapTargetY];
 		public static bool[,] mapWasContentLost = new bool[Main.mapTargetX, Main.mapTargetY];
 		public Texture2D[] infoIconTexture = new Texture2D[14];
@@ -554,12 +_,12 @@
 		private int lastTileX;
 		private int firstTileY;
 		private int lastTileY;
-		private double bgParallax;
-		private int bgStart;
-		private int bgLoops;
+		internal double bgParallax;
+		internal int bgStart;
+		internal int bgLoops;
 		private int bgStartY;
 		private int bgLoopsY;
-		private int bgTop;
+		internal int bgTop;
 		public static int renderCount = 99;
 		public static GraphicsDeviceManager graphics;
 		public static SpriteBatch spriteBatch;
@@ -598,6 +_,7 @@
 		public static bool maxQ = true;
 		public static float gfxQuality = 1f;
 		public static float gfxRate = 0.01f;
+		public static Microsoft.Xna.Framework.Color DiscoColor => new Microsoft.Xna.Framework.Color(DiscoR, DiscoG, DiscoB);
 		public int DiscoStyle;
 		public static int DiscoR = 255;
 		public static int DiscoB = 0;
@@ -632,7 +_,7 @@
 		public static int maxDustToDraw = 6000;
 		public static int ActivePlayersCount = 0;
 		public static int maxNetPlayers = 255;
-		private static UICharacterSelect _characterSelectMenu = new UICharacterSelect();
+		internal static UICharacterSelect _characterSelectMenu = new UICharacterSelect();
 		private static UIWorldSelect _worldSelectMenu = new UIWorldSelect();
 		public static UIManageControls ManageControlsMenu = new UIManageControls();
 		public static UIAchievementsMenu AchievementsMenu = new UIAchievementsMenu();
@@ -1067,7 +_,7 @@
 		public static AudioEngine engine;
 		public static SoundBank soundBank;
 		public static WaveBank waveBank;
-		public static Cue[] music = new Cue[42];
+		public static Music[] music = new Music[42];
 		public static float[] musicFade = new float[42];
 		public static float musicVolume = 0.75f;
 		public static float ambientVolume = 0.75f;
@@ -1221,6 +_,8 @@
 			0.75f
 		};
 		public static byte mouseTextColor = 0;
+		public static Microsoft.Xna.Framework.Color mouseTextColorReal
+			=> new Microsoft.Xna.Framework.Color(mouseTextColor /255f, mouseTextColor / 255f, mouseTextColor / 255f, mouseTextColor / 255f);
 		public static int mouseTextColorChange = 1;
 		public static bool mouseLeftRelease = false;
 		public static bool mouseRightRelease = false;
@@ -1334,9 +_,9 @@
 		public static List<WorldFileData> WorldList = new List<WorldFileData>();
 		public static WorldFileData ActiveWorldFileData = new WorldFileData();
 		public static string WorldPath = Path.Combine(Main.SavePath, "Worlds");
-		public static string CloudWorldPath = "worlds";
+		public static string CloudWorldPath = "ModLoader/worlds";
 		public static string PlayerPath = Path.Combine(Main.SavePath, "Players");
-		public static string CloudPlayerPath = "players";
+		public static string CloudPlayerPath = "ModLoader/players";
 		public static Preferences Configuration = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "config.json", false, false);
 		public static Preferences InputProfiles = new Preferences(Main.SavePath + Path.DirectorySeparatorChar + "input profiles.json", false, false);
 		public static KeyboardState inputText;
@@ -2058,15 +_,15 @@
 		private int selectedMenu2 = -1;
 		public static int selectedPlayer = 0;
 		public static int selectedWorld = 0;
-		public static int menuMode = 0;
+		public static int menuMode = Interface.loadModsID;
 		public static int menuSkip = 0;
 		private static bool _needsLanguageSelect = true;
 		private static Item cpItem = new Item();
 		public int textBlinkerCount;
 		public int textBlinkerState;
 		public static string newWorldName = "";
-		private static int[] specX = new int[1000];
-		private static int[] specY = new int[1000];
+		public static int[] specX = new int[1000];
+		public static int[] specY = new int[1000];
 		private bool _imeToggle;
 		public static bool HoveringOverAnNPC = false;
 		public static string hoverItemName = "";
@@ -2076,7 +_,7 @@
 		private static int UI_ScreenAnchorX = Main.screenWidth - 800;
 		private static int UIDisplay_ManaPerStar = 20;
 		private static float UIDisplay_LifePerHeart = 20f;
-		private static int rare = 0;
+		public static int rare = 0;
 		public static int hairStart = 0;
 		private static int oldHairStyle;
 		private static Microsoft.Xna.Framework.Color oldHairColor;
@@ -2088,7 +_,7 @@
 		public static Player dresserDummy;
 		private bool _needToSetupDrawInterfaceLayers = true;
 		private List<GameInterfaceLayer> _gameInterfaceLayers;
-		private static GameTime _drawInterfaceGameTime;
+		public static GameTime _drawInterfaceGameTime;
 		private static bool _MouseOversCanClear = false;
 		private static Vector2 _itemIconCacheScreenPosition;
 		private static int _itemIconCacheSelectedItemID;
@@ -2126,12 +_,12 @@
 		};
 		private static float tranSpeed = 0.05f;
 		private static float atmo = 0f;
-		private static float bgScale = 1f;
-		private static int bgW = (int)(1024f * Main.bgScale);
-		private static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
-		private static Microsoft.Xna.Framework.Color trueBackColor = Main.backColor;
-		private float screenOff;
-		private float scAdj;
+		internal static float bgScale = 1f;
+		internal static int bgW = (int)(1024f * Main.bgScale);
+		internal static Microsoft.Xna.Framework.Color backColor = Microsoft.Xna.Framework.Color.White;
+		internal static Microsoft.Xna.Framework.Color trueBackColor = Main.backColor;
+		internal float screenOff;
+		internal float scAdj;
 		private float cTop;
 		private bool _isDrawingOrUpdating;
 		private static SlotVector<ActiveSound> _trackedSounds = new SlotVector<ActiveSound>(4096);
@@ -2274,6 +_,8 @@
 				return Main.instance._achievements;
 			}
 		}
+
+		public static ulong TileFrameSeed => Main._tileFrameSeed;
 
 		public static Effect screenShader
 		{
@@ -2525,6 +_,8 @@
 				Main.itemAnimationsRegistered.Add(index);
 			}
 			Main.itemAnimations[index] = animation;
+			if (ItemLoader.IsModItem(index))
+				ItemLoader.animations.Add(index);
 		}
 
 		public static void InitializeItemAnimations()
@@ -2622,6 +_,7 @@
 				flag2 = false;
 				Main.anglerQuest = Main.rand.Next(Main.anglerQuestItemNetIDs.Length);
 				int num = Main.anglerQuestItemNetIDs[Main.anglerQuest];
+				//patch file: num, flag2
 				if (num == 2454 && (!Main.hardMode || WorldGen.crimson))
 				{
 					flag2 = true;
@@ -2678,6 +_,7 @@
 				{
 					flag2 = true;
 				}
+				ItemLoader.IsAnglerQuestAvailable(num, ref flag2);
 			}
 			NetMessage.SendAnglerQuest(-1);
 		}
@@ -2804,7 +_,7 @@
 				{
 					using (BinaryWriter binaryWriter = new BinaryWriter(fileStream))
 					{
-						binaryWriter.Write(193);
+						binaryWriter.Write(194);
 						for (int i = 0; i < 10; i++)
 						{
 							binaryWriter.Write(Main.recentWorld[i]);
@@ -2846,7 +_,7 @@
 			Main.Configuration.Put("LightingThreads", Lighting.LightingThreads);
 			Main.Configuration.Put("Parallax", Main.caveParallax);
 			Main.Configuration.Put("ShowItemText", Main.showItemText);
-			Main.Configuration.Put("LastLaunchedVersion", 193);
+			Main.Configuration.Put("LastLaunchedVersion", 194);
 			Main.Configuration.Put("ClientUUID", Main.clientUUID);
 			Main.Configuration.Put("UseSmartCursorForCommonBlocks", Player.SmartCursorSettings.SmartBlocksEnabled);
 			Main.Configuration.Put("UseSmartAxeAfterSmartPickaxe", Player.SmartCursorSettings.SmartAxeAfterPickaxe);
@@ -2903,6 +_,7 @@
 			Main.Configuration.Put("QuickLaunch", Main.SkipAssemblyLoad);
 			Main.Configuration.Put("Zoom", Main.GameZoomTarget);
 			Main.Configuration.Put("UIScale", Main._uiScaleWanted);
+			ModLoader.ModLoader.SaveConfiguration();
 			bool flag = Main.Configuration.Save(true);
 			return flag && PlayerInput.Save();
 		}
@@ -3225,6 +_,7 @@
 					Main.cMapAlphaDown
 				};
 			}
+			ModLoader.ModLoader.LoadConfiguration();
 			PlayerInput.Load();
 			if (num2 < 165)
 			{
@@ -3239,7 +_,7 @@
 			Main.mouseColorSlider.SetHSL(Main.mouseColor);
 			Main.mouseBorderColorSlider.SetHSL(Main.MouseBorderColor);
 			Main.mouseBorderColorSlider.Alpha = (float)Main.MouseBorderColor.A / 255f;
-			if (num2 != 193)
+			if (num2 != 194)
 			{
 				Main.SaveSettings();
 			}
@@ -3392,9 +_,11 @@
 				FileUtilities.Delete(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
 				FileUtilities.Delete(Main.PlayerList[i].Path + ".bak", Main.PlayerList[i].IsCloudSave);
 			}
+			//patch file
 			catch
 			{
 			}
+			PlayerIO.ErasePlayer(Main.PlayerList[i].Path, Main.PlayerList[i].IsCloudSave);
 			try
 			{
 				string path = Main.PlayerList[i].Path.Substring(0, Main.PlayerList[i].Path.Length - 4);
@@ -3427,6 +_,7 @@
 				{
 					SocialAPI.Cloud.Delete(Main.WorldList[i].Path);
 				}
+				WorldIO.EraseWorld(Main.WorldList[i].Path, Main.WorldList[i].IsCloudSave);
 				Main.LoadWorlds();
 			}
 			catch
@@ -3708,6 +_,14 @@
 							{
 								string text3 = text.Substring(10);
 								Main.worldName = text3;
+							}
+							if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpath=")
+							{
+								ModLoader.ModLoader.modPath = text.Substring(8);
+							}
+							if (text.Length >= 8 && text.Substring(0, 8).ToLower() == "modpack=")
+							{
+								ModLoader.ModLoader.commandLineModPack = text.Substring(8);
 							}
 							if (text.Length >= 5 && text.Substring(0, 5).ToLower() == "seed=")
 							{
@@ -3863,18 +_,19 @@
 			}
 			else
 			{
-				Console.Title = "Terraria Server " + Main.versionNumber2;
+				Console.Title = "Terraria Server " + Main.versionNumber2 + " - " + ModLoader.ModLoader.versionedName;
 			}
 			Main.dedServ = true;
 			Main.showSplash = false;
 			this.Initialize();
+			ModLoader.ModLoader.do_Load(null);
 			while (Main.worldPathName == null || Main.worldPathName == "")
 			{
 				bool flag = true;
 				while (flag)
 				{
 					Main.LoadWorlds();
-					Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2));
+					Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber2) + " - " + ModLoader.ModLoader.versionedName);
 					Console.WriteLine("");
 					for (int i = 0; i < Main.WorldList.Count; i++)
 					{
@@ -3893,6 +_,8 @@
 					text3 = text3 + new string('\t', num - text3.Length / 8) + Language.GetTextValue("CLI.DeleteWorld_Description");
 					Console.WriteLine(text2);
 					Console.WriteLine(text3);
+					Console.WriteLine("m\t\tMods Menu");
+					Console.WriteLine("b\t\tMod Browser");
 					Console.WriteLine("");
 					Console.Write(Language.GetTextValue("CLI.ChooseWorld"));
 					string text4 = Console.ReadLine();
@@ -4155,6 +_,16 @@
 							goto IL_76F;
 						}
 						goto IL_76F;
+					}
+					else if (text4 == "m" || text4 == "M")
+					{
+						Interface.ServerModMenu();
+						continue;
+					}
+					else if (text4 == "b" || text4 == "b")
+					{
+						Interface.ServerModBrowserMenu();
+						continue;
 					}
 					else
 					{
@@ -4286,6 +_,7 @@
 			catch
 			{
 			}
+			Main.myPlayer = 255;
 			WorldGen.serverLoadWorld();
 			Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
 			Console.WriteLine("");
@@ -4301,6 +_,9 @@
 					Console.WriteLine(Main.statusText);
 				}
 			}
+			//run one tick to JIT all the game content now rather than when a player connects
+			Console.WriteLine("Running one update...");
+			Update(new GameTime());
 			try
 			{
 				Console.Clear();
@@ -4320,20 +_,11 @@
 				Main.startDedInput();
 			}
 			stopwatch.Start();
-			double num9 = 16.666666666666668;
-			double num10 = 0.0;
-			int num11 = 0;
-			Stopwatch stopwatch2 = new Stopwatch();
-			stopwatch2.Start();
+			double delta = 1000 / 60D;
+			double target = delta;
 			while (!Netplay.disconnect)
 			{
-				double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
-				if (totalMilliseconds + num10 >= num9)
-				{
-					num11++;
-					num10 += totalMilliseconds - num9;
-					stopwatch.Reset();
-					stopwatch.Start();
+				{
 					if (Main.oldStatusText != Main.statusText)
 					{
 						Main.oldStatusText = Main.statusText;
@@ -4343,26 +_,24 @@
 					{
 						this.Update(new GameTime());
 					}
+					else
+					{
+						Netplay.OnUpdate();
+					}
 					if (Main.OnTick != null)
 					{
 						Main.OnTick();
 					}
-					double num12 = stopwatch.Elapsed.TotalMilliseconds + num10;
-					if (num12 < num9)
-					{
-						int num13 = (int)(num9 - num12) - 1;
-						if (num13 > 1)
-						{
-							Thread.Sleep(num13 - 1);
-							if (!Netplay.anyClients)
-							{
-								num10 = 0.0;
-								Thread.Sleep(10);
-							}
-						}
-					}
-				}
-				Thread.Sleep(0);
+					double now = stopwatch.ElapsedMilliseconds;
+					double remaining = target - now;
+					target += delta; //new target
+					if (target < now) //can't catch up, reset target
+					{
+						target = now + delta;
+					}
+
+					Thread.Sleep(Math.Max((int)remaining, 0));
+				}
 			}
 		}
 
@@ -4423,13 +_,23 @@
 								num = text3.Length;
 							}
 						}
+
+						var modHelpList = CommandManager.GetHelp(CommandType.Console);
+						foreach (var entry in modHelpList)
+							if (entry.Item1.Length > num)
+								num = entry.Item1.Length;
+
 						int num2 = (num + 1) / 8;
 						for (int j = 0; j < list.Count; j++)
 						{
 							string text4 = Language.Exists("CLI." + list[j] + "_Example") ? Language.GetTextValue("CLI." + list[j] + "_Example") : Language.GetTextValue("CLI." + list[j] + "_Command");
 							Console.WriteLine(text4 + new string('\t', num2 - text4.Length / 8) + Language.GetTextValue("CLI." + list[j] + "_Description"));
 						}
-					}
+
+						foreach (var entry in modHelpList)
+							Console.WriteLine(entry.Item1 + new string('\t', num2 - entry.Item1.Length / 8) + entry.Item2);
+					}
+					else if (CommandManager.HandleCommand(text, new ConsoleCommandCaller())) {}
 					else if (text == Language.GetTextValue("CLI.Settle_Command"))
 					{
 						if (!Liquid.panicMode)
@@ -4547,7 +_,7 @@
 					}
 					else if (text == Language.GetTextValue("CLI.Version_Command"))
 					{
-						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber));
+						Console.WriteLine(Language.GetTextValue("CLI.Server", Main.versionNumber) + " - " + ModLoader.ModLoader.versionedName);
 					}
 					else
 					{
@@ -4776,7 +_,7 @@
 		public static void InitLifeBytes()
 		{
 			NPC nPC = new NPC();
-			for (int i = -65; i < 580; i++)
+			for (int i = -65; i < NPCLoader.NPCCount; i++)
 			{
 				if (i != 0)
 				{
@@ -4834,6 +_,13 @@
 
 		protected override void Initialize()
 		{
+			DateTime date = DateTime.Now;
+			if ((date.Month == 5 && date.Day == 17) || (date.Month == 7 && date.Day == 8) || (date.Month == 10 && date.Day == 24)
+				|| (date.Month == 6 && date.Day == 1) || (date.Month == 4 || date.Day == 1) || new Random().Next(100) == 0)
+			{
+				OurFavoriteColor.R = OurFavoriteColor.B;
+				OurFavoriteColor.B = 255;
+			}
 #if SERVER
 			Main.netMode = 2;
 #endif
@@ -7490,7 +_,7 @@
 			{
 				Main.SetGraphicsProfile(GraphicsProfile.HiDef);
 			}
-			TexturePackSupport.FindTexturePack();
+			TexturePackSupport.FindTexturePacks();
 			TextureManager.Initialize();
 			this.mapSectionTexture = new RenderTarget2D(base.GraphicsDevice, 200, 150);
 			Main.ShaderContentManager = new ContentManager(base.Content.ServiceProvider, base.Content.RootDirectory);
@@ -8639,6 +_,7 @@
 					bool flag13 = false;
 					Microsoft.Xna.Framework.Rectangle rectangle = new Microsoft.Xna.Framework.Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
 					int num = 5000;
+					int modMusic = -1;
 					for (int l = 0; l < 200; l++)
 					{
 						if (Main.npc[l].active)
@@ -8845,7 +_,7 @@
 								num2 = 10;
 							}
 							IL_4D9:
-							if (NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[l].type])
+							if (Main.npc[l].type < NPCID.Sets.BelongsToInvasionOldOnesArmy.Length && NPCID.Sets.BelongsToInvasionOldOnesArmy[Main.npc[l].type])
 							{
 								num2 = 12;
 							}
@@ -8853,7 +_,7 @@
 							{
 								num2 = 1;
 							}
-							if (num2 == 0)
+							if (num2 == 0 && (Main.npc[l].modNPC == null || Main.npc[l].modNPC.music < 0))
 							{
 								goto IL_5F6;
 							}
@@ -8861,6 +_,10 @@
 							if (!rectangle.Intersects(value))
 							{
 								goto IL_5F6;
+							}
+							if (Main.npc[l].modNPC != null && Main.npc[l].modNPC.music >= 0 && modMusic < 0)
+							{
+								modMusic = Main.npc[l].modNPC.music;
 							}
 							if (num2 == 1)
 							{
@@ -8957,6 +_,10 @@
 						if (flag8)
 						{
 							this.newMusic = 38;
+						}
+						else if (modMusic >= 0)
+						{
+							this.newMusic = modMusic;
 						}
 						else if (flag10)
 						{
@@ -9182,6 +_,7 @@
 							this.newMusic = 32;
 						}
 					}
+					ModHooks.UpdateMusic(ref this.newMusic);
 					if (Main.gameMenu || Main.musicVolume == 0f)
 					{
 						Main.musicBox2 = -1;
@@ -9352,6 +_,10 @@
 						if (Main.musicBox == 39)
 						{
 							this.newMusic = 41;
+						}
+						if (Main.musicBox >= Main.maxMusic)
+						{
+							this.newMusic = Main.musicBox;
 						}
 					}
 					Main.curMusic = this.newMusic;
@@ -9369,13 +_,17 @@
 							num8 = 0f;
 							Main.curMusic = 0;
 						}
-						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < 42)
+						if (NPC.MoonLordCountdown == 1 && Main.curMusic >= 1 && Main.curMusic < Main.music.Length)
 						{
 							Main.musicFade[Main.curMusic] = 0f;
 						}
 					}
-					for (int m = 1; m < 42; m++)
-					{
+					for (int m = 1; m < Main.music.Length; m++)
+					{
+						if (Main.music[m] == null)
+						{
+							continue; // Race condition, Music is resized during load.
+						}
 						if (m == 28)
 						{
 							if (Main.cloudAlpha > 0f && (double)Main.player[Main.myPlayer].position.Y < Main.worldSurface * 16.0 + (double)(Main.screenHeight / 2) && !Main.player[Main.myPlayer].ZoneSnow)
@@ -9389,7 +_,11 @@
 								}
 								else if (!Main.music[m].IsPlaying)
 								{
-									Main.music[m] = Main.soundBank.GetCue("Music_" + m);
+									MusicStreaming streaming = Main.music[m] as MusicStreaming;
+									if (Main.music[m] is MusicCue)
+										Main.music[m] = Main.soundBank.GetCue("Music_" + m);
+									if (streaming != null)
+										streaming.ResetStreamPosition();
 									Main.music[m].Play();
 									Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.ambientVolume);
 								}
@@ -9436,7 +_,11 @@
 						{
 							if (!Main.music[m].IsPlaying)
 							{
-								Main.music[m] = Main.soundBank.GetCue("Music_" + m);
+								MusicStreaming streaming = Main.music[m] as MusicStreaming;
+								if (Main.music[m] is MusicCue)
+									Main.music[m] = Main.soundBank.GetCue("Music_" + m);
+								if (streaming != null)
+									streaming.ResetStreamPosition();
 								Main.music[m].Play();
 								Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.musicVolume * num8);
 							}
@@ -9449,9 +_,11 @@
 								}
 								Main.music[m].SetVariable("Volume", Main.musicFade[m] * Main.musicVolume * num8);
 							}
+							Main.music[m].CheckBuffer();
 						}
 						else if (Main.music[m].IsPlaying)
 						{
+							Main.music[m].CheckBuffer();
 							if (Main.musicFade[Main.curMusic] > 0.25f)
 							{
 								Main.musicFade[m] -= 0.005f;
@@ -11935,6 +_,8 @@
 			if (!this._isDrawingOrUpdating)
 			{
 				this._isDrawingOrUpdating = true;
+				try
+				{
 				this.DoUpdate(gameTime);
 				CinematicManager.Instance.Update(gameTime);
 				if (Main.netMode == 2)
@@ -11950,6 +_,11 @@
 				else if (Main.netMode == 1)
 				{
 					Netplay.Connection.Socket.SendQueuedPackets();
+				}
+				}
+				catch (Exception e)
+				{
+					ErrorLogger.LogException(e);
 				}
 				this._isDrawingOrUpdating = false;
 			}
@@ -12011,6 +_,7 @@
 				Main.netMode = Main._targetNetMode;
 				Main._hasPendingNetmodeChange = false;
 			}
+			Netplay.OnUpdate(); // TODO, why do we add this?
 			if (CaptureManager.Instance.IsCapturing)
 			{
 				return;
@@ -12239,7 +_,9 @@
 					Liquid.cycles = 1;
 				}
 				Main.hasFocus = base.IsActive;
+#if WINDOWS
 				Main.hasFocus = (Form.ActiveForm == Control.FromHandle(base.Window.Handle) as Form);
+#endif
 				if (!Main.gameMenu || Main.netMode == 2)
 				{
 					WorldFile.tempRaining = Main.raining;
@@ -12435,6 +_,10 @@
 				{
 					flag = true;
 				}
+				if (!PlayerHooks.CustomBiomesMatch(Main.player[Main.myPlayer], Main.clientPlayer))
+				{
+					flag = true;
+				}
 				if (flag)
 				{
 					NetMessage.SendData(36, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
@@ -12498,6 +_,7 @@
 				{
 					NetMessage.SendData(115, -1, -1, null, Main.myPlayer, 0f, 0f, 0f, 0, 0, 0);
 				}
+				PlayerHooks.SendClientChanges(Main.player[Main.myPlayer], Main.clientPlayer);
 			}
 			if (Main.netMode == 1)
 			{
@@ -12982,7 +_,7 @@
 
 		private static void DoUpdate_Enter_ToggleChat()
 		{
-			if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && Main.netMode == 1 && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
+			if (Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Enter) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.LeftAlt) && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.RightAlt) && Main.hasFocus)
 			{
 				if (Main.chatRelease && !Main.drawingPlayerChat && !Main.editSign && !Main.editChest && !Main.gameMenu && !Main.keyState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys.Escape))
 				{
@@ -13049,7 +_,8 @@
 			}
 			if (Main.inputTextEnter && Main.chatRelease)
 			{
-				if (Main.chatText != "")
+				var handled = chatText.Length > 0 && chatText[0] == '/' && CommandManager.HandleCommand(chatText, new ChatCommandCaller());
+				if (Main.chatText != "" && !handled)
 				{
 					ChatMessage chatMessage = new ChatMessage(Main.chatText);
 					ChatManager.Commands.ProcessOutgoingMessage(chatMessage);
@@ -13076,6 +_,7 @@
 		private void DoUpdate_HandleInput()
 		{
 			PlayerInput.UpdateInput();
+			ModLoader.ModHooks.PostUpdateInput();
 			this.UpdateViewZoomKeys();
 			PlayerInput.SetZoom_Unscaled();
 			UILinkPointNavigator.Update();
@@ -13773,6 +_,7 @@
 					Main.tileFrame[464] = 0;
 				}
 			}
+			TileLoader.AnimateTiles();
 			Main.CritterCages();
 		}
 
@@ -13983,6 +_,7 @@
 			{
 				Main.wallFrameCounter[144] = 0;
 			}
+			WallLoader.AnimateWalls();
 		}
 
 		private void DoUpdate_AnimateWaterfalls()
@@ -14617,22 +_,28 @@
 			string[] array = new string[num3];
 			bool[] array2 = new bool[num3];
 			bool[] array3 = new bool[num3];
+			string[] tooltipNames = new string[num3];
 			for (int i = 0; i < num3; i++)
 			{
 				array2[i] = false;
 				array3[i] = false;
 			}
 			array[0] = Main.HoverItem.HoverName;
+			tooltipNames[0] = "ItemName";
 			if (Main.HoverItem.favorited)
 			{
 				array[num4++] = Lang.tip[56].Value;
+				tooltipNames[num4 - 1] = "Favorite";
 				array[num4++] = Lang.tip[57].Value;
+				tooltipNames[num4 - 1] = "FavoriteDesc";
 			}
 			if (Main.HoverItem.social)
 			{
 				array[num4] = Lang.tip[0].Value;
+				tooltipNames[num4] = "Social";
 				num4++;
 				array[num4] = Lang.tip[1].Value;
+				tooltipNames[num4] = "SocialDesc";
 				num4++;
 			}
 			else
@@ -14641,9 +_,13 @@
 				{
 					float num5 = 5E-06f;
 					int damage = Main.HoverItem.damage;
+					Player player = Main.player[Main.myPlayer];
 					if (Main.HoverItem.melee)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].meleeDamage * (float)damage + num5));
+						int damage2 = (int)(player.meleeDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.HoverItem, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.HoverItem, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array4;
 						IntPtr intPtr;
 						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[2].Value;
@@ -14667,21 +_,30 @@
 						{
 							num6 *= Main.player[Main.myPlayer].rocketDamage;
 						}
-						array[num4] = string.Concat((int)(num6 + num5));
+						int damage2 = (int)(num6 + num5);
+						ItemLoader.GetWeaponDamage(Main.HoverItem, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.HoverItem, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array5;
 						IntPtr intPtr2;
 						(array5 = array)[(int)(intPtr2 = (IntPtr)num4)] = array5[(int)intPtr2] + Lang.tip[3].Value;
 					}
 					else if (Main.HoverItem.magic)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].magicDamage * (float)damage + num5));
+						int damage2 = (int)(player.magicDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.HoverItem, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.HoverItem, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array6;
 						IntPtr intPtr3;
 						(array6 = array)[(int)(intPtr3 = (IntPtr)num4)] = array6[(int)intPtr3] + Lang.tip[4].Value;
 					}
 					else if (Main.HoverItem.thrown)
 					{
-						array[num4] = string.Concat((int)(Main.player[Main.myPlayer].thrownDamage * (float)damage + num5));
+						int damage2 = (int)(player.thrownDamage * (float)damage + num5);
+						ItemLoader.GetWeaponDamage(Main.HoverItem, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.HoverItem, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array7;
 						IntPtr intPtr4;
 						(array7 = array)[(int)(intPtr4 = (IntPtr)num4)] = array7[(int)intPtr4] + Lang.tip[58].Value;
@@ -14690,11 +_,17 @@
 					{
 						if (Main.HoverItem.type == 3829 || Main.HoverItem.type == 3830 || Main.HoverItem.type == 3831)
 						{
-							array[num4] = string.Concat((int)((Main.player[Main.myPlayer].minionDamage * (float)damage + num5) * 3f));
+							int damage2 = (int)((player.minionDamage * (float)damage + num5) * 3f);
+							ItemLoader.GetWeaponDamage(Main.HoverItem, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.HoverItem, ref damage2);
+							array[num4] = string.Concat(damage2);
 						}
 						else
 						{
-							array[num4] = string.Concat((int)(Main.player[Main.myPlayer].minionDamage * (float)damage + num5));
+							int damage2 = (int)(player.minionDamage * (float)damage + num5);
+							ItemLoader.GetWeaponDamage(Main.HoverItem, player, ref damage2);
+							PlayerHooks.GetWeaponDamage(player, Main.HoverItem, ref damage2);
+							array[num4] = string.Concat(damage2);
 						}
 						string[] array8;
 						IntPtr intPtr5;
@@ -14702,34 +_,50 @@
 					}
 					else
 					{
-						array[num4] = string.Concat(damage);
+						int damage2 = damage;
+						ItemLoader.GetWeaponDamage(Main.HoverItem, player, ref damage2);
+						PlayerHooks.GetWeaponDamage(player, Main.HoverItem, ref damage2);
+						array[num4] = string.Concat(damage2);
 						string[] array4;
 						IntPtr intPtr;
 						(array4 = array)[(int)(intPtr = (IntPtr)num4)] = array4[(int)intPtr] + Lang.tip[55].Value;
 					}
+					tooltipNames[num4] = "Damage";
 					num4++;
 					if (Main.HoverItem.melee)
 					{
 						int num7 = Main.player[Main.myPlayer].meleeCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.HoverItem.crit;
+						ItemLoader.GetWeaponCrit(Main.HoverItem, player, ref num7);
+						PlayerHooks.GetWeaponCrit(player, Main.HoverItem, ref num7);
 						array[num4] = num7 + Lang.tip[5].Value;
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.HoverItem.ranged)
 					{
 						int num8 = Main.player[Main.myPlayer].rangedCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.HoverItem.crit;
+						ItemLoader.GetWeaponCrit(Main.HoverItem, player, ref num8);
+						PlayerHooks.GetWeaponCrit(player, Main.HoverItem, ref num8);
 						array[num4] = num8 + Lang.tip[5].Value;
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.HoverItem.magic)
 					{
 						int num9 = Main.player[Main.myPlayer].magicCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.HoverItem.crit;
+						ItemLoader.GetWeaponCrit(Main.HoverItem, player, ref num9);
+						PlayerHooks.GetWeaponCrit(player, Main.HoverItem, ref num9);
 						array[num4] = num9 + Lang.tip[5].Value;
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					else if (Main.HoverItem.thrown)
 					{
 						int num10 = Main.player[Main.myPlayer].thrownCrit - Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].crit + Main.HoverItem.crit;
+						ItemLoader.GetWeaponCrit(Main.HoverItem, player, ref num10);
+						PlayerHooks.GetWeaponCrit(player, Main.HoverItem, ref num10);
 						array[num4] = num10 + Lang.tip[5].Value;
+						tooltipNames[num4] = "CritChance";
 						num4++;
 					}
 					if (Main.HoverItem.useStyle > 0 && !Main.HoverItem.summon)
@@ -14766,6 +_,7 @@
 						{
 							array[num4] = Lang.tip[13].Value;
 						}
+						tooltipNames[num4] = "Speed";
 						num4++;
 					}
 					float num11 = Main.HoverItem.knockBack;
@@ -14781,6 +_,8 @@
 					{
 						num11 += num11 * (1f - Main.player[Main.myPlayer].stealth);
 					}
+					ItemLoader.GetWeaponKnockback(Main.HoverItem, player, ref num11);
+					PlayerHooks.GetWeaponKnockback(player, Main.HoverItem, ref num11);
 					if (num11 == 0f)
 					{
 						array[num4] = Lang.tip[14].Value;
@@ -14817,58 +_,70 @@
 					{
 						array[num4] = Lang.tip[22].Value;
 					}
+					tooltipNames[num4] = "Knockback";
 					num4++;
 				}
 				if (Main.HoverItem.fishingPole > 0)
 				{
 					array[num4] = Language.GetTextValue("GameUI.PrecentFishingPower", Main.HoverItem.fishingPole);
+					tooltipNames[num4] = "FishingPower";
 					num4++;
 					array[num4] = Language.GetTextValue("GameUI.BaitRequired");
+					tooltipNames[num4] = "NeedsBait";
 					num4++;
 				}
 				if (Main.HoverItem.bait > 0)
 				{
 					array[num4] = Language.GetTextValue("GameUI.BaitPower", Main.HoverItem.bait);
+					tooltipNames[num4] = "BaitPower";
 					num4++;
 				}
 				if (Main.HoverItem.headSlot > 0 || Main.HoverItem.bodySlot > 0 || Main.HoverItem.legSlot > 0 || Main.HoverItem.accessory || Main.projHook[Main.HoverItem.shoot] || Main.HoverItem.mountType != -1 || (Main.HoverItem.buffType > 0 && (Main.lightPet[Main.HoverItem.buffType] || Main.vanityPet[Main.HoverItem.buffType])))
 				{
 					array[num4] = Lang.tip[23].Value;
+					tooltipNames[num4] = "Equipable";
 					num4++;
 				}
 				if (Main.HoverItem.tileWand > 0)
 				{
 					array[num4] = Lang.tip[52].Value + Lang.GetItemNameValue(Main.HoverItem.tileWand);
+					tooltipNames[num4] = "WandConsumes";
 					num4++;
 				}
 				if (Main.HoverItem.questItem)
 				{
 					array[num4] = Lang.inter[65].Value;
+					tooltipNames[num4] = "Quest";
 					num4++;
 				}
 				if (Main.HoverItem.vanity)
 				{
 					array[num4] = Lang.tip[24].Value;
+					tooltipNames[num4] = "Vanity";
 					num4++;
 				}
 				if (Main.HoverItem.defense > 0)
 				{
 					array[num4] = Main.HoverItem.defense + Lang.tip[25].Value;
+					tooltipNames[num4] = "Defense";
 					num4++;
 				}
 				if (Main.HoverItem.pick > 0)
 				{
 					array[num4] = Main.HoverItem.pick + Lang.tip[26].Value;
+					tooltipNames[num4] = "PickPower";
 					num4++;
 				}
 				if (Main.HoverItem.axe > 0)
 				{
 					array[num4] = Main.HoverItem.axe * 5 + Lang.tip[27].Value;
+					tooltipNames[num4] = "AxePower";
 					num4++;
 				}
 				if (Main.HoverItem.hammer > 0)
 				{
 					array[num4] = Main.HoverItem.hammer + Lang.tip[28].Value;
+					tooltipNames[num4] = "HammerPower";
 					num4++;
 				}
 				if (Main.HoverItem.tileBoost != 0)
@@ -14882,21 +_,25 @@
 					{
 						array[num4] = tileBoost + Lang.tip[54].Value;
 					}
+					tooltipNames[num4] = "TileBoost";
 					num4++;
 				}
 				if (Main.HoverItem.healLife > 0)
 				{
 					array[num4] = Language.GetTextValue("CommonItemTooltip.RestoresLife", Main.HoverItem.healLife);
+					tooltipNames[num4] = "HealLife";
 					num4++;
 				}
 				if (Main.HoverItem.healMana > 0)
 				{
 					array[num4] = Language.GetTextValue("CommonItemTooltip.RestoresMana", Main.HoverItem.healMana);
+					tooltipNames[num4] = "HealMana";
 					num4++;
 				}
 				if (Main.HoverItem.mana > 0 && (Main.HoverItem.type != 127 || !Main.player[Main.myPlayer].spaceGun))
 				{
 					array[num4] = Language.GetTextValue("CommonItemTooltip.UsesMana", (int)((float)Main.HoverItem.mana * Main.player[Main.myPlayer].manaCost));
+					tooltipNames[num4] = "UseMana";
 					num4++;
 				}
 				if (Main.HoverItem.createWall > 0 || Main.HoverItem.createTile > -1)
@@ -14904,22 +_,26 @@
 					if (Main.HoverItem.type != 213 && Main.HoverItem.tileWand < 1)
 					{
 						array[num4] = Lang.tip[33].Value;
+						tooltipNames[num4] = "Placeable";
 						num4++;
 					}
 				}
 				else if (Main.HoverItem.ammo > 0 && !Main.HoverItem.notAmmo)
 				{
 					array[num4] = Lang.tip[34].Value;
+					tooltipNames[num4] = "Ammo";
 					num4++;
 				}
 				else if (Main.HoverItem.consumable)
 				{
 					array[num4] = Lang.tip[35].Value;
+					tooltipNames[num4] = "Consumable";
 					num4++;
 				}
 				if (Main.HoverItem.material)
 				{
 					array[num4] = Lang.tip[36].Value;
+					tooltipNames[num4] = "Material";
 					num4++;
 				}
 				if (Main.HoverItem.ToolTip != null)
@@ -14929,11 +_,13 @@
 						if (j == 0 && Main.HoverItem.type >= 1533 && Main.HoverItem.type <= 1537 && !NPC.downedPlantBoss)
 						{
 							array[num4] = Lang.tip[59].Value;
+							tooltipNames[num4] = "Tooltip" + j;
 							num4++;
 						}
 						else
 						{
 							array[num4] = Main.HoverItem.ToolTip.GetLine(j);
+							tooltipNames[num4] = "Tooltip" + j;
 							num4++;
 						}
 					}
@@ -14941,11 +_,13 @@
 				if ((Main.HoverItem.type == 3818 || Main.HoverItem.type == 3819 || Main.HoverItem.type == 3820 || Main.HoverItem.type == 3824 || Main.HoverItem.type == 3825 || Main.HoverItem.type == 3826 || Main.HoverItem.type == 3829 || Main.HoverItem.type == 3830 || Main.HoverItem.type == 3831 || Main.HoverItem.type == 3832 || Main.HoverItem.type == 3833 || Main.HoverItem.type == 3834) && !Main.player[Main.myPlayer].downedDD2EventAnyDifficulty)
 				{
 					array[num4] = Lang.misc[104].Value;
+					tooltipNames[num4] = "EtherianManaWarning";
 					num4++;
 				}
 				if (Main.HoverItem.buffType == 26 && Main.expertMode)
 				{
 					array[num4] = Lang.misc[40].Value;
+					tooltipNames[num4] = "WellFedExpert";
 					num4++;
 				}
 				if (Main.HoverItem.buffTime > 0)
@@ -14960,12 +_,14 @@
 						textValue = Language.GetTextValue("CommonItemTooltip.SecondDuration", Math.Round((double)Main.HoverItem.buffTime / 60.0));
 					}
 					array[num4] = textValue;
+					tooltipNames[num4] = "BuffTime";
 					num4++;
 				}
 				if (Main.HoverItem.type == 3262 || Main.HoverItem.type == 3282 || Main.HoverItem.type == 3283 || Main.HoverItem.type == 3284 || Main.HoverItem.type == 3285 || Main.HoverItem.type == 3286 || Main.HoverItem.type == 3316 || Main.HoverItem.type == 3315 || Main.HoverItem.type == 3317 || Main.HoverItem.type == 3291 || Main.HoverItem.type == 3389)
 				{
 					array[num4] = " ";
 					num = num4;
+					tooltipNames[num4] = "OneDropLogo";
 					num4++;
 				}
 				if (Main.HoverItem.prefix > 0)
@@ -14993,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixDamage";
 						num4++;
 					}
 					if (Main.cpItem.useAnimation != Main.HoverItem.useAnimation)
@@ -15014,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixSpeed";
 						num4++;
 					}
 					if (Main.cpItem.crit != Main.HoverItem.crit)
@@ -15032,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixCritChance";
 						num4++;
 					}
 					if (Main.cpItem.mana != Main.HoverItem.mana)
@@ -15052,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixUseMana";
 						num4++;
 					}
 					if (Main.cpItem.scale != Main.HoverItem.scale)
@@ -15072,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixSize";
 						num4++;
 					}
 					if (Main.cpItem.shootSpeed != Main.HoverItem.shootSpeed)
@@ -15092,6 +_,7 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixShootSpeed";
 						num4++;
 					}
 					if (Main.cpItem.knockBack != knockBack)
@@ -15112,135 +_,158 @@
 							array3[num4] = true;
 						}
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixKnockback";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 62)
 					{
 						array[num4] = "+1" + Lang.tip[25].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 63)
 					{
 						array[num4] = "+2" + Lang.tip[25].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 64)
 					{
 						array[num4] = "+3" + Lang.tip[25].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 65)
 					{
 						array[num4] = "+4" + Lang.tip[25].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDefense";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 66)
 					{
 						array[num4] = "+20 " + Lang.tip[31].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMaxMana";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 67)
 					{
 						array[num4] = "+2" + Lang.tip[5].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccCritChance";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 68)
 					{
 						array[num4] = "+4" + Lang.tip[5].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccCritChance";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 69)
 					{
 						array[num4] = "+1" + Lang.tip[39].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 70)
 					{
 						array[num4] = "+2" + Lang.tip[39].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 71)
 					{
 						array[num4] = "+3" + Lang.tip[39].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 72)
 					{
 						array[num4] = "+4" + Lang.tip[39].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccDamage";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 73)
 					{
 						array[num4] = "+1" + Lang.tip[46].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 74)
 					{
 						array[num4] = "+2" + Lang.tip[46].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 75)
 					{
 						array[num4] = "+3" + Lang.tip[46].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 76)
 					{
 						array[num4] = "+4" + Lang.tip[46].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMoveSpeed";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 77)
 					{
 						array[num4] = "+1" + Lang.tip[47].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 78)
 					{
 						array[num4] = "+2" + Lang.tip[47].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 79)
 					{
 						array[num4] = "+3" + Lang.tip[47].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 					if (Main.HoverItem.prefix == 80)
 					{
 						array[num4] = "+4" + Lang.tip[47].Value;
 						array2[num4] = true;
+						tooltipNames[num4] = "PrefixAccMeleeSpeed";
 						num4++;
 					}
 				}
 				if (Main.HoverItem.wornArmor && Main.player[Main.myPlayer].setBonus != "")
 				{
 					array[num4] = Lang.tip[48].Value + " " + Main.player[Main.myPlayer].setBonus;
+					tooltipNames[num4] = "SetBonus";
 					num4++;
 				}
 			}
 			if (Main.HoverItem.expert)
 			{
 				array[num4] = Language.GetTextValue("GameUI.Expert");
+				tooltipNames[num4] = "Expert";
 				num4++;
 			}
 			float num19 = (float)Main.mouseTextColor / 255f;
+			//patch file: num20
 			float num20 = num19;
 			int a = (int)Main.mouseTextColor;
 			if (Main.npcShop > 0)
@@ -15248,6 +_,7 @@
 				int storeValue = Main.HoverItem.GetStoreValue();
 				if (Main.HoverItem.shopSpecialCurrency != -1)
 				{
+					tooltipNames[num4] = "SpecialPrice";
 					CustomCurrencyManager.GetPriceText(Main.HoverItem.shopSpecialCurrency, array, ref num4, storeValue);
 					color = new Microsoft.Xna.Framework.Color((int)((byte)(255f * num20)), (int)((byte)(255f * num20)), (int)((byte)(255f * num20)), a);
 				}
@@ -15347,6 +_,7 @@
 					{
 						array[num4] = Lang.tip[50].Value + " " + text;
 					}
+					tooltipNames[num4] = "Price";
 					num4++;
 					if (num21 > 0)
 					{
@@ -15368,20 +_,27 @@
 				else if (Main.HoverItem.type != 3817)
 				{
 					array[num4] = Lang.tip[51].Value;
+					tooltipNames[num4] = "Price";
 					num4++;
 					color = new Microsoft.Xna.Framework.Color((int)((byte)(120f * num20)), (int)((byte)(120f * num20)), (int)((byte)(120f * num20)), a);
 				}
 			}
 			Vector2 zero = Vector2.Zero;
-			int num26 = 0;
+			Microsoft.Xna.Framework.Color?[] overrideColor;
+			List<TooltipLine> lines = ItemLoader.ModifyTooltips(Main.HoverItem, ref num4, tooltipNames, ref array, ref array2, ref array3, ref num, out overrideColor);
+			List<DrawableTooltipLine> drawableLines = lines.Select((x, i) => new DrawableTooltipLine(x, i, 0, 0, Microsoft.Xna.Framework.Color.White)).ToList();
+			int yOffset = 0; // num26
 			for (int k = 0; k < num4; k++)
 			{
+				/* Below fixes the calculated width for lines containing Chat tags
 				Vector2 vector = Main.fontMouseText.MeasureString(array[k]);
+				*/
+				Vector2 vector = ChatManager.GetStringSize(Main.fontMouseText, array[k], Vector2.One);
 				if (vector.X > zero.X)
 				{
 					zero.X = vector.X;
 				}
-				zero.Y += vector.Y + (float)num26;
+				zero.Y += vector.Y + (float)yOffset;
 			}
 			X += Main.toolTipDistance;
 			Y += Main.toolTipDistance;
@@ -15393,41 +_,56 @@
 			{
 				Y = (int)((float)Main.screenHeight - zero.Y - 4f);
 			}
-			int num27 = 0;
+			// remove num27, it's vertical offset per line
+			// int num27 = 0;
 			num19 = (float)Main.mouseTextColor / 255f;
+
+			bool globalCanDraw = ItemLoader.PreDrawTooltip(Main.HoverItem, lines.AsReadOnly(), ref X, ref Y);
+
 			for (int l = 0; l < num4; l++)
 			{
-				if (l == num)
+				Microsoft.Xna.Framework.Color drawColor;
+				bool isOneDropLogo = l == num;
+				drawableLines[l].OriginalX = X; // it also sets X
+				drawableLines[l].OriginalY = Y; // it also sets Y
+
+				if (isOneDropLogo)
 				{
 					float num28 = 1f;
 					int num29 = (int)((float)Main.mouseTextColor * num28);
 					Microsoft.Xna.Framework.Color black = Microsoft.Xna.Framework.Color.Black;
-					for (int m = 0; m < 5; m++)
-					{
-						int num30 = X;
-						int num31 = Y + num27;
-						if (m == 4)
-						{
-							black = new Microsoft.Xna.Framework.Color(num29, num29, num29, num29);
-						}
-						if (m == 0)
-						{
-							num30--;
-						}
-						else if (m == 1)
-						{
-							num30++;
-						}
-						else if (m == 2)
-						{
-							num31--;
-						}
-						else if (m == 3)
-						{
-							num31++;
-						}
-						Main.spriteBatch.Draw(Main.oneDropLogo, new Vector2((float)num30, (float)num31), null, black, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
-					}
+
+					drawableLines[l].color = new Microsoft.Xna.Framework.Color(num29, num29, num29, num29);
+
+					if (ItemLoader.PreDrawTooltipLine(Main.HoverItem, drawableLines[l], ref yOffset) && globalCanDraw)
+					{
+						for (int m = 0; m < 5; m++)
+						{
+							int num30 = drawableLines[l].X;
+							int num31 = drawableLines[l].Y;
+							if (m == 0)
+							{
+								num30--;
+							}
+							else if (m == 1)
+							{
+								num30++;
+							}
+							else if (m == 2)
+							{
+								num31--;
+							}
+							else if (m == 3)
+							{
+								num31++;
+							}
+
+							drawColor = drawableLines[l].overrideColor ?? drawableLines[l].color;
+							Main.spriteBatch.Draw(Main.oneDropLogo, new Vector2((float) num30, (float) num31), null, m != 4 ? black : drawColor, drawableLines[l].rotation, drawableLines[l].origin, (drawableLines[l].baseScale.X + drawableLines[l].baseScale.Y) / 2, SpriteEffects.None, 0f);
+						}
+					}
+
+					ItemLoader.PostDrawTooltipLine(Main.HoverItem, drawableLines[l]);
 				}
 				else
 				{
@@ -15515,10 +_,22 @@
 					{
 						baseColor = color;
 					}
-					ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, Main.fontMouseText, array[l], new Vector2((float)X, (float)(Y + num27)), baseColor, 0f, Vector2.Zero, Vector2.One, -1f, 2f);
-				}
-				num27 += (int)(Main.fontMouseText.MeasureString(array[l]).Y + (float)num26);
-			}
+					drawableLines[l].color = baseColor;
+					drawColor = baseColor;
+					if (overrideColor[l].HasValue)
+					{
+						drawColor = overrideColor[l].Value * num20;
+					}
+
+					if (ItemLoader.PreDrawTooltipLine(Main.HoverItem, drawableLines[l], ref yOffset) && globalCanDraw)
+						ChatManager.DrawColorCodedStringWithShadow(Main.spriteBatch, drawableLines[l].font, drawableLines[l].text, new Vector2((float)drawableLines[l].X, (float)drawableLines[l].Y), drawColor, drawableLines[l].rotation, drawableLines[l].origin, drawableLines[l].baseScale, drawableLines[l].maxWidth, drawableLines[l].spread);
+
+					ItemLoader.PostDrawTooltipLine(Main.HoverItem, drawableLines[l]);
+				}
+				Y += (int)(Main.fontMouseText.MeasureString(array[l]).Y + (float)yOffset);
+			}
+
+			ItemLoader.PostDrawTooltip(Main.HoverItem, drawableLines.AsReadOnly());
 		}
 
 		private void MouseText_DrawBuffString(ref int X, ref int Y)
@@ -15538,7 +_,7 @@
 			if (Main.bannerMouseOver)
 			{
 				int num5 = 0;
-				for (int i = 0; i < 267; i++)
+				for (int i = 0; i < NPCLoader.NPCCount; i++)
 				{
 					if (Item.BannerToNPC(i) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[i])
 					{
@@ -15563,6 +_,7 @@
 					}
 				}
 			}
+			BuffLoader.CustomBuffTipSize(Main.buffString, list);
 			Vector2 zero = Vector2.Zero;
 			foreach (Vector2 current in list)
 			{
@@ -15617,7 +_,7 @@
 			if (Main.bannerMouseOver)
 			{
 				int num12 = 0;
-				for (int l = 0; l < 267; l++)
+				for (int l = 0; l < NPCLoader.NPCCount; l++)
 				{
 					if (Item.BannerToNPC(l) != 0 && Main.player[Main.myPlayer].NPCBannerBuff[l])
 					{
@@ -15660,13 +_,14 @@
 							}
 							Main.spriteBatch.DrawString(Main.fontMouseText, text, new Vector2((float)num13, (float)num14), black2, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
-						if (flag)
+						if (flag) // Todo, BuffLoader.DrawCustomBuffTip here? This is new to fix too many banner buffs I think.
 						{
 							return;
 						}
 					}
 				}
 			}
+			BuffLoader.DrawCustomBuffTip(Main.buffString, Main.spriteBatch, X, Y + (int)Main.fontMouseText.MeasureString(Main.buffString).Y);
 		}
 
 		protected void DrawFPS()
@@ -15913,6 +_,7 @@
 				for (int j = num4 - 2; j < num5 + 2; j++)
 				{
 					Tile tile = Main.tile[j, i];
+					//patch file: j, i
 					if (tile == null)
 					{
 						tile = new Tile();
@@ -15959,6 +_,7 @@
 						{
 							effects = SpriteEffects.FlipHorizontally;
 						}
+						TileLoader.SetSpriteEffects(j, i, type, ref effects);
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
 						int num11 = 0;
 						int num12 = 16;
@@ -16127,6 +_,7 @@
 						}
 						if (type == 227)
 						{
+							//patch file: num8, num12
 							num8 = 32;
 							num12 = 38;
 							if (num9 == 238)
@@ -16210,6 +_,7 @@
 						{
 							num11 = 2;
 						}
+						TileLoader.SetDrawPositions(j, i, ref num8, ref num11, ref num12);
 						int num14 = 0;
 						if (tile.halfBrick())
 						{
@@ -16492,6 +_,12 @@
 								num15 += 90;
 							}
 						}
+						TileLoader.SetAnimationFrame(type, j, i, ref num16, ref num15);
+						if (!TileLoader.PreDraw(j, i, type, Main.spriteBatch))
+						{
+							TileLoader.PostDraw(j, i, type, Main.spriteBatch);
+							continue;
+						}
 						if (type == 373 || type == 374 || type == 375 || type == 461)
 						{
 							int num33 = 60;
@@ -16529,6 +_,10 @@
 									if (Main.waterStyle > 1)
 									{
 										num34 = 706 + Main.waterStyle - 1;
+										if (Main.waterStyle >= WaterStyleLoader.vanillaWaterCount)
+										{
+											num34 = WaterStyleLoader.GetWaterStyle(Main.waterStyle).GetDropletGore();
+										}
 									}
 									if (type == 374)
 									{
@@ -17103,6 +_,7 @@
 										flag4 = (flag4 || type == 162);
 									}
 								}
+								flag4 = flag4 || TileLoader.Dangersense(j, i, type, Main.player[Main.myPlayer]);
 								if (flag4)
 								{
 									if (color.R < 255)
@@ -17836,6 +_,7 @@
 												{
 													white = new Microsoft.Xna.Framework.Color(50, 255, 100, 255);
 												}
+												// TODO, ModTile hook for Shine color.
 												int num90 = Dust.NewDust(new Vector2((float)(j * 16), (float)(i * 16)), 16, 16, 43, 0f, 0f, 254, white, 0.5f);
 												Main.dust[num90].velocity *= 0f;
 											}
@@ -18088,6 +_,7 @@
 								}
 								Main.spriteBatch.Draw(Main.shroomCapTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X - 22), (float)(i * 16 - (int)Main.screenPosition.Y - 26)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num104 * 62, 0, 60, 42)), Lighting.GetColor(j, i), 0f, default(Vector2), 1f, effects, 0f);
 							}
+							TileLoader.DrawEffects(j, i, type, Main.spriteBatch, ref color, ref num3);
 							if (color.R >= 1 || color.G >= 1 || color.B >= 1)
 							{
 								Tile tile2 = Main.tile[j + 1, i];
@@ -18882,6 +_,7 @@
 									bool flag13 = false;
 									bool flag14 = false;
 									bool flag15 = false;
+									Texture2D modCactusTexture = null;
 									if (!Main.canDrawColorTile(j, i))
 									{
 										int num166 = j;
@@ -18930,12 +_,18 @@
 										{
 											flag14 = true;
 										}
+										//patch file: num166, num167
 										if (Main.tile[num166, num167].type == 234)
 										{
 											flag15 = true;
 										}
+										modCactusTexture = TileLoader.GetCactusTexture(Main.tile[num166, num167].type);
 									}
-									if (flag13)
+									if (modCactusTexture != null)
+									{
+										Main.spriteBatch.Draw(modCactusTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - ((float)num8 - 16f) / 2f, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+									}
+									else if (flag13)
 									{
 										Main.spriteBatch.Draw(Main.evilCactusTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 									}
@@ -19271,10 +_,16 @@
 												num179++;
 											}
 											int treeVariant = Main.GetTreeVariant(num178, num179);
-											if (treeVariant == -1)
+											Texture2D modTreeTexture = TileLoader.GetTreeTexture(Main.tile[num178, num179]);
+											if (modTreeTexture != null)
+											{
+												Main.spriteBatch.Draw(modTreeTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - (num8 - 16f) / 2f, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, num10, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+											}
+											else if (treeVariant == -1)
 											{
 												if (Main.canDrawColorTile(j, i))
 												{
+													//patch file
 													Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, (int)num10, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 												}
 												else
@@ -19314,11 +_,17 @@
 											}
 											if (Main.tile[num181, num182].active() && Main.tile[num181, num182].type == 112)
 											{
+												//patch file: num181, num182
 												num180 = 3;
 											}
 											int y2 = 22 * num180;
 											int num183 = (int)num10;
-											if (Main.canDrawColorTile(j, i))
+											Texture2D modTreeTexture = TileLoader.GetPalmTreeTexture(Main.tile[num181, num182]);
+											if (modTreeTexture != null)
+											{
+												Main.spriteBatch.Draw(modTreeTexture, new Vector2(j * 16 - (int)Main.screenPosition.X - (num8 - 16f) / 2f + num181, i * 16 - (int)Main.screenPosition.Y + num11) + zero, new Microsoft.Xna.Framework.Rectangle(num9, y2, num8, num12), color, 0f, default(Vector2), 1f, effects, 0f);
+											}
+											else if (Main.canDrawColorTile(j, i))
 											{
 												Main.spriteBatch.Draw(Main.tileAltTexture[(int)type, (int)tile.color()], new Vector2((float)(j * 16 - (int)Main.screenPosition.X) - ((float)num8 - 16f) / 2f + (float)num183, (float)(i * 16 - (int)Main.screenPosition.Y + num11)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle((int)num9, y2, num8, num12)), color, 0f, default(Vector2), 1f, effects, 0f);
 											}
@@ -19919,6 +_,7 @@
 						}
 					}
 					IL_CEBF:
+					TileLoader.PostDraw(j, i, type, Main.spriteBatch); // TODO, is this the right spot?
 					;
 				}
 			}
@@ -20117,6 +_,7 @@
 				{
 					if (type4 == 5 && frameY >= 198 && frameX >= 22)
 					{
+						//frame
 						int num320 = 0;
 						if (frameX == 22)
 						{
@@ -20129,13 +_,24 @@
 								num320 = 2;
 							}
 							int num321 = 0;
+							//frame width
 							int num322 = 80;
+							//frame height
 							int num323 = 80;
+							//x offset left
 							int num324 = 32;
+							//y offset
 							int num325 = 0;
 							int num326 = num303;
+							Texture2D modTopTextures = null;
 							while (num326 < num303 + 100)
 							{
+								modTopTextures = TileLoader.GetTreeTopTextures(Main.tile[num302, num326].type,
+									num302, num326, ref num320, ref num322, ref num323, ref num324, ref num325);
+								if (modTopTextures != null)
+								{
+									break;
+								}
 								if (Main.tile[num302, num326].type == 2)
 								{
 									num321 = Main.GetTreeStyle(num302);
@@ -20238,11 +_,15 @@
 								num327 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num327 / 2f, 0.7f + num327);
 							}
-							if (tile6.color() > 0)
+							if (modTopTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num321, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num321, (int)tile6.color()])
+							if (modTopTextures != null)
+							{
+								Main.spriteBatch.Draw(modTopTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - num324, num303 * 16 - (int)Main.screenPosition.Y - num323 + 16 + num325) + zero, new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num321, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeTopAltTexture[num321, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num324), (float)(num303 * 16 - (int)Main.screenPosition.Y - num323 + 16 + num325)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num320 * (num322 + 2), 0, num322, num323)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -20263,8 +_,15 @@
 							}
 							int num328 = 0;
 							int num329 = num303;
+							Texture2D modBranchTextures = null;
 							while (num329 < num303 + 100)
 							{
+								modBranchTextures = TileLoader.GetTreeBranchTextures(Main.tile[num302 + 1, num329].type,
+									num302, num329, 1, ref num320);
+								if (modBranchTextures != null)
+								{
+									break;
+								}
 								if (Main.tile[num302 + 1, num329].type == 2)
 								{
 									num328 = Main.GetTreeStyle(num302 + 1);
@@ -20334,11 +_,15 @@
 								num330 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num330 / 2f, 0.7f + num330);
 							}
-							if (tile6.color() > 0)
+							if (modBranchTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num328, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num328, (int)tile6.color()])
+							if (modBranchTextures != null)
+							{
+								Main.spriteBatch.Draw(modBranchTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - 24, num303 * 16 - (int)Main.screenPosition.Y - 12) + zero, new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num328, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeBranchAltTexture[num328, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - 24), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -20359,8 +_,15 @@
 							}
 							int num331 = 0;
 							int num332 = num303;
+							Texture2D modBranchTextures = null;
 							while (num332 < num303 + 100)
 							{
+								modBranchTextures = TileLoader.GetTreeBranchTextures(Main.tile[num302 - 1, num332].type,
+									num302, num332, -1, ref num320);
+								if (modBranchTextures != null)
+								{
+									break;
+								}
 								if (Main.tile[num302 - 1, num332].type == 2)
 								{
 									num331 = Main.GetTreeStyle(num302 - 1);
@@ -20430,11 +_,15 @@
 								num333 += (float)(270 - (int)Main.mouseTextColor) / 1000f;
 								Lighting.AddLight(num302, num303, 0.1f, 0.2f + num333 / 2f, 0.7f + num333);
 							}
-							if (tile6.color() > 0)
+							if (modBranchTextures == null && tile6.color() > 0)
 							{
 								Main.checkTreeAlt[num331, (int)tile6.color()] = true;
 							}
-							if (tile6.color() > 0 && Main.treeAltTextureDrawn[num331, (int)tile6.color()])
+							if (modBranchTextures != null)
+							{
+								Main.spriteBatch.Draw(modBranchTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X, num303 * 16 - (int)Main.screenPosition.Y - 12) + zero, new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+							}
+							else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num331, (int)tile6.color()])
 							{
 								Main.spriteBatch.Draw(Main.treeBranchAltTexture[num331, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X), (float)(num303 * 16 - (int)Main.screenPosition.Y - 12)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(42, num320 * 42, 40, 40)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 							}
@@ -20461,8 +_,14 @@
 						int num338 = 80;
 						int num339 = 32;
 						int num340 = 0;
+						Texture2D modTopTextures = null;
 						for (int num341 = num303; num341 < num303 + 100; num341++)
 						{
+							modTopTextures = TileLoader.GetPalmTreeTopTextures(Main.tile[num302, num341].type);
+							if (modTopTextures != null)
+							{
+								break;
+							}
 							if (Main.tile[num302, num341].type == 53)
 							{
 								num336 = 0;
@@ -20486,11 +_,15 @@
 						}
 						int frameY3 = (int)Main.tile[num302, num303].frameY;
 						int y3 = num336 * 82;
-						if (tile6.color() > 0)
+						if (modTopTextures == null && tile6.color() > 0)
 						{
 							Main.checkTreeAlt[num335, (int)tile6.color()] = true;
 						}
-						if (tile6.color() > 0 && Main.treeAltTextureDrawn[num335, (int)tile6.color()])
+						if (modTopTextures != null)
+						{
+							Main.spriteBatch.Draw(modTopTextures, new Vector2(num302 * 16 - (int)Main.screenPosition.X - num339 + frameY3, num303 * 16 - (int)Main.screenPosition.Y - num338 + 16 + num340) + zero, new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+						}
+						else if (tile6.color() > 0 && Main.treeAltTextureDrawn[num335, (int)tile6.color()])
 						{
 							Main.spriteBatch.Draw(Main.treeTopAltTexture[num335, (int)tile6.color()], new Vector2((float)(num302 * 16 - (int)Main.screenPosition.X - num339 + frameY3), (float)(num303 * 16 - (int)Main.screenPosition.Y - num338 + 16 + num340)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(num334 * (num337 + 2), y3, num337, num338)), Lighting.GetColor(num302, num303), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 						}
@@ -20503,6 +_,7 @@
 				catch
 				{
 				}
+				TileLoader.SpecialDraw(type4, num302, num303, Main.spriteBatch);
 			}
 			if (TileObject.objectPreview.Active && Main.player[Main.myPlayer].showItemIcon && Main.placementPreview && !CaptureManager.Instance.Active)
 			{
@@ -20600,7 +_,7 @@
 				if (Main.gore[i].active && Main.gore[i].type > 0)
 				{
 					bool flag = false;
-					if (((Main.gore[i].type >= 706 && Main.gore[i].type <= 717) || Main.gore[i].type == 943) && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
+					if (ModGore.DrawBackGore(Main.gore[i]))
 					{
 						flag = true;
 					}
@@ -20611,12 +_,12 @@
 						{
 							int num = Main.goreTexture[Main.gore[i].type].Height / (int)Main.gore[i].numFrames;
 							Microsoft.Xna.Framework.Color alpha = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)num * 0.5) / 16.0)));
-							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(num / 2) - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * (int)Main.gore[i].frame, Main.goreTexture[Main.gore[i].type].Width, num)), alpha, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(num / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
+							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X + Main.gore[i].drawOffset.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y + Main.gore[i].drawOffset.Y - Main.screenPosition.Y + (float)(num / 2) - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * (int)Main.gore[i].frame, Main.goreTexture[Main.gore[i].type].Width, num)), alpha, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(num / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
 						}
 						else
 						{
 							Microsoft.Xna.Framework.Color alpha2 = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)Main.goreTexture[Main.gore[i].type].Height * 0.5) / 16.0)));
-							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.goreTexture[Main.gore[i].type].Width, Main.goreTexture[Main.gore[i].type].Height)), alpha2, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
+							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X + Main.gore[i].drawOffset.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y + Main.gore[i].drawOffset.Y - Main.screenPosition.Y + (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.goreTexture[Main.gore[i].type].Width, Main.goreTexture[Main.gore[i].type].Height)), alpha2, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
 						}
 					}
 				}
@@ -20630,7 +_,7 @@
 			{
 				if (Main.gore[i].active && Main.gore[i].type > 0)
 				{
-					if (((Main.gore[i].type >= 706 && Main.gore[i].type <= 717) || Main.gore[i].type == 943) && (Main.gore[i].frame < 7 || Main.gore[i].frame > 9))
+					if (ModGore.DrawBackGore(Main.gore[i]))
 					{
 						Main.drawBackGore = true;
 					}
@@ -20641,12 +_,12 @@
 						{
 							int num = Main.goreTexture[Main.gore[i].type].Height / (int)Main.gore[i].numFrames;
 							Microsoft.Xna.Framework.Color alpha = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)num * 0.5) / 16.0)));
-							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(num / 2) - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * (int)Main.gore[i].frame, Main.goreTexture[Main.gore[i].type].Width, num)), alpha, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(num / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
+							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X + Main.gore[i].drawOffset.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y + Main.gore[i].drawOffset.Y - Main.screenPosition.Y + (float)(num / 2) - 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, num * (int)Main.gore[i].frame, Main.goreTexture[Main.gore[i].type].Width, num)), alpha, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(num / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
 						}
 						else
 						{
 							Microsoft.Xna.Framework.Color alpha2 = Main.gore[i].GetAlpha(Lighting.GetColor((int)((double)Main.gore[i].position.X + (double)Main.goreTexture[Main.gore[i].type].Width * 0.5) / 16, (int)(((double)Main.gore[i].position.Y + (double)Main.goreTexture[Main.gore[i].type].Height * 0.5) / 16.0)));
-							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y - Main.screenPosition.Y + (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.goreTexture[Main.gore[i].type].Width, Main.goreTexture[Main.gore[i].type].Height)), alpha2, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
+							Main.spriteBatch.Draw(Main.goreTexture[Main.gore[i].type], new Vector2(Main.gore[i].position.X + Main.gore[i].drawOffset.X - Main.screenPosition.X + (float)(Main.goreTexture[Main.gore[i].type].Width / 2), Main.gore[i].position.Y + Main.gore[i].drawOffset.Y - Main.screenPosition.Y + (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.goreTexture[Main.gore[i].type].Width, Main.goreTexture[Main.gore[i].type].Height)), alpha2, Main.gore[i].rotation, new Vector2((float)(Main.goreTexture[Main.gore[i].type].Width / 2), (float)(Main.goreTexture[Main.gore[i].type].Height / 2)), Main.gore[i].scale, SpriteEffects.None, 0f);
 						}
 					}
 				}
@@ -20654,7 +_,7 @@
 			TimeLogger.DetailedDrawTime(24);
 		}
 
-		protected void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
+		public void DrawHealthBar(float X, float Y, int Health, int MaxHealth, float alpha, float scale = 1f)
 		{
 			if (Health <= 0)
 			{
@@ -20859,6 +_,10 @@
 			else if (Main.npc[i].type == 152)
 			{
 				num = 6f;
+			}
+			else if (Main.npc[i].modNPC != null)
+			{
+				num = Main.npc[i].modNPC.drawOffsetY;
 			}
 			else if (Main.npc[i].type == 153 || Main.npc[i].type == 154)
 			{
@@ -21407,7 +_,7 @@
 			{
 				try
 				{
-					if (Main.npc[i].active && Main.npc[i].type > 0 && Main.npc[i].type < 580 && !Main.npc[i].hide)
+					if (Main.npc[i].active && Main.npc[i].type > 0 && !Main.npc[i].hide)
 					{
 						Main.npc[i].visualOffset *= 0.95f;
 						Main.npc[i].position += Main.npc[i].visualOffset;
@@ -21535,7 +_,7 @@
 			}
 		}
 
-		protected void DrawNPCCheckAlt(NPC n)
+		public void DrawNPCCheckAlt(NPC n)
 		{
 			if (NPCID.Sets.ExtraTextureCount[n.type] == 0)
 			{
@@ -21548,7 +_,7 @@
 			Main.npcTexture[n.type] = Main.npcAltTextures[n.type][n.altTexture];
 		}
 
-		protected void DrawNPC(int iNPCIndex, bool behindTiles)
+		public void DrawNPC(int iNPCIndex, bool behindTiles)
 		{
 			NPC nPC = Main.npc[iNPCIndex];
 			int type = nPC.type;
@@ -22204,6 +_,7 @@
 			}
 			if (nPC.ichor)
 			{
+				//patch file: color9
 				color9 = new Microsoft.Xna.Framework.Color(255, 255, 0, 255);
 			}
 			if (nPC.onFrostBurn)
@@ -22240,6 +_,7 @@
 				}
 				Lighting.AddLight((int)(nPC.position.X / 16f), (int)(nPC.position.Y / 16f + 1f), 1f, 0.3f, 0.1f);
 			}
+			NPCLoader.DrawEffects(nPC, ref color9);
 			if (Main.player[Main.myPlayer].detectCreature && nPC.lifeMax > 1)
 			{
 				byte b;
@@ -22269,6 +_,11 @@
 				{
 					color9.B = b3;
 				}
+			}
+			if (!NPCLoader.PreDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9))
+			{
+				NPCLoader.PostDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9);
+				return;
 			}
 			if (type == 50)
 			{
@@ -24880,6 +_,7 @@
 					}
 				}
 			}
+			NPCLoader.PostDraw(Main.npc[iNPCIndex], Main.spriteBatch, color9);
 		}
 
 		protected void DrawNPCExtras(NPC n, bool beforeDraw, float addHeight, float addY, Microsoft.Xna.Framework.Color npcColor, Vector2 halfSize, SpriteEffects npcSpriteEffect)
@@ -25124,6 +_,7 @@
 						num6 = 0.75f;
 					}
 				}
+				NPCLoader.DrawTownAttackGun(n, ref num6, ref num7, ref num8);
 				Texture2D texture2D2 = Main.itemTexture[num7];
 				int num9 = (int)this.DrawPlayerItemPos(1f, num7).X - num8;
 				Vector2 origin2 = new Vector2((float)(-(float)num9), (float)(texture2D2.Height / 2));
@@ -25199,6 +_,7 @@
 						zero.Y = 12f;
 					}
 				}
+				NPCLoader.DrawTownAttackSwing(n, ref texture2D6, ref num10, ref scaleFactor, ref zero);
 				Tuple<Vector2, float> swingStats = n.GetSwingStats(NPCID.Sets.AttackTime[n.type] * 2, (int)n.ai[1], n.spriteDirection, num10, num10);
 				Vector2 vector4 = swingStats.Item1 + (swingStats.Item1 - n.Center) * scaleFactor + zero;
 				Vector2 origin4 = texture2D6.Size() * new Vector2((float)((n.spriteDirection == 1) ? 0 : 1), 1f);
@@ -25402,7 +_,11 @@
 					}
 				}
 			}
-			if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
+			if (!ProjectileLoader.PreDrawExtras(projectile, Main.spriteBatch))
+			{
+				//fluff
+			}
+			else if (projectile.bobber && Main.player[projectile.owner].inventory[Main.player[projectile.owner].selectedItem].holdStyle > 0)
 			{
 				num = mountedCenter.X;
 				num2 = mountedCenter.Y;
@@ -26819,6 +_,11 @@
 			{
 				color25 = Microsoft.Xna.Framework.Color.White;
 			}
+			if (!ProjectileLoader.PreDraw(projectile, Main.spriteBatch, color25))
+			{
+				ProjectileLoader.PostDraw(projectile, Main.spriteBatch, color25);
+				return;
+			}
 			int num147 = 0;
 			int num148 = 0;
 			if (projectile.type == 175)
@@ -26839,6 +_,7 @@
 			}
 			if (projectile.type == 519)
 			{
+				//patch file: num147, num148
 				num147 = 6;
 				num148 -= 6;
 			}
@@ -27018,6 +_,7 @@
 				num147 = 4;
 				num148 = 4;
 			}
+			//patch file: num149
 			float num149 = (float)(Main.projectileTexture[projectile.type].Width - projectile.width) * 0.5f + (float)projectile.width * 0.5f;
 			if (projectile.type == 50 || projectile.type == 53 || projectile.type == 515)
 			{
@@ -27118,6 +_,7 @@
 			{
 				num147 = 8;
 			}
+			ProjectileLoader.DrawOffset(projectile, ref num148, ref num147, ref num149);
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (projectile.spriteDirection == -1)
 			{
@@ -29559,7 +_,7 @@
 					}
 					if (projectile.bobber)
 					{
-						if (projectile.ai[1] > 0f && projectile.ai[1] < 3930f && projectile.ai[0] == 1f)
+						if (projectile.ai[1] > 0f && projectile.ai[0] == 1f)
 						{
 							int num329 = (int)projectile.ai[1];
 							Vector2 center = projectile.Center;
@@ -29753,6 +_,7 @@
 					}
 				}
 			}
+			ProjectileLoader.PostDraw(projectile, Main.spriteBatch, color25);
 		}
 
 		private static Microsoft.Xna.Framework.Color buffColor(Microsoft.Xna.Framework.Color newColor, float R, float G, float B, float A)
@@ -29885,6 +_,7 @@
 							this.DrawCacheProjsBehindProjectiles.Add(i);
 						}
 					}
+					ProjectileLoader.DrawBehind(Main.projectile[i], i, DrawCacheProjsBehindNPCsAndTiles, DrawCacheProjsBehindNPCs, DrawCacheProjsBehindProjectiles, DrawCacheProjsOverWiresUI);
 				}
 			}
 		}
@@ -30516,6 +_,7 @@
 				result.Y += 2f * gravdir;
 			}
 			result.X = num;
+			ItemLoader.HoldoutOffset(gravdir, itemtype, ref result);
 			return result;
 		}
 
@@ -30531,6 +_,12 @@
 
 		protected void DrawPlayerHead(Player drawPlayer, float X, float Y, float Alpha = 1f, float Scale = 1f)
 		{
+			//prepare for lots of ugly code
+			PlayerHeadDrawInfo drawInfo = new PlayerHeadDrawInfo();
+			drawInfo.spriteBatch = Main.spriteBatch;
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.alpha = Alpha;
+			drawInfo.scale = Scale;
 			int shaderId = 0;
 			int skinVariant = drawPlayer.skinVariant;
 			short num = (short)drawPlayer.hairDye;
@@ -30538,10 +_,11 @@
 			{
 				num = 1;
 			}
+			drawInfo.hairShader = num;
 			for (int i = 0; i < 16 + drawPlayer.extraAccessorySlots * 2; i++)
 			{
 				int num2 = i % 10;
-				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+				if (drawPlayer.dye[num2] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && drawPlayer.armor[i].faceSlot > 0)
 				{
 					byte arg_81_0 = drawPlayer.dye[num2].dye;
 				}
@@ -30554,18 +_,26 @@
 			{
 				shaderId = (int)drawPlayer.dye[0].dye;
 			}
+			drawInfo.armorShader = shaderId;
 			this.LoadHair(drawPlayer.hair);
 			Microsoft.Xna.Framework.Color color = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.eyeWhiteColor = color;
 			Microsoft.Xna.Framework.Color color2 = this.quickAlpha(drawPlayer.eyeColor, Alpha);
+			drawInfo.eyeColor = color2;
 			Microsoft.Xna.Framework.Color color3 = this.quickAlpha(drawPlayer.GetHairColor(false), Alpha);
+			drawInfo.hairColor = color3;
 			Microsoft.Xna.Framework.Color color4 = this.quickAlpha(drawPlayer.skinColor, Alpha);
+			drawInfo.skinColor = color4;
 			Microsoft.Xna.Framework.Color color5 = this.quickAlpha(Microsoft.Xna.Framework.Color.White, Alpha);
+			drawInfo.armorColor = color5;
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			if (drawPlayer.direction < 0)
 			{
 				spriteEffects = SpriteEffects.FlipHorizontally;
 			}
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.drawOrigin = vector;
 			Vector2 position = drawPlayer.position;
 			Microsoft.Xna.Framework.Rectangle bodyFrame = drawPlayer.bodyFrame;
 			drawPlayer.bodyFrame.Y = 0;
@@ -30594,12 +_,55 @@
 			{
 				flag2 = true;
 			}
-			if (drawPlayer.head != 38 && drawPlayer.head != 135)
+			ItemLoader.DrawHair(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHair = flag;
+			drawInfo.drawAltHair = flag2;
+			List<PlayerHeadLayer> drawLayers = PlayerHooks.GetDrawHeadLayers(drawPlayer);
+			int layerIndex = -1;
+			layerLoopContinue:
+			layerIndex++;
+			if (layerIndex >= drawLayers.Count)
+			{
+				goto postDraw;
+			}
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+			{
+				goto layerLoopContinue;
+			}
+			if (drawLayers[layerIndex] == PlayerHeadLayer.Head)
+			{
+				goto headLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Hair)
+			{
+				goto hairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.AltHair)
+			{
+				goto altHairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.Armor)
+			{
+				goto armorLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerHeadLayer.FaceAcc)
+			{
+				goto faceLayer;
+			}
+			else
+			{
+				drawLayers[layerIndex].Draw(ref drawInfo);
+			}
+			goto layerLoopContinue;
+			headLayer:
+			if (drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer))
 			{
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 0], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 1], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 				Main.spriteBatch.Draw(Main.playerTextures[skinVariant, 2], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color2, drawPlayer.headRotation, vector, Scale, spriteEffects, 0f);
 			}
+			goto layerLoopContinue;
+			hairLayer:
 			if (flag)
 			{
 				DrawData value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
@@ -30620,6 +_,8 @@
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
 			}
+			goto layerLoopContinue;
+			altHairLayer:
 			if (flag2)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame3 = drawPlayer.bodyFrame;
@@ -30636,6 +_,8 @@
 					Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 				}
 			}
+			goto layerLoopContinue;
+			armorLayer:
 			if (drawPlayer.head == 23)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame4 = drawPlayer.bodyFrame;
@@ -30707,7 +_,7 @@
 				value4.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 216 && drawPlayer.head != 28)
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28)
 			{
 				DrawData value5 = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2(drawPlayer.position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2), drawPlayer.position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f) + drawPlayer.headPosition + vector, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.headRotation, vector, Scale, spriteEffects, 0);
 				GameShaders.Armor.Apply(shaderId, drawPlayer, new DrawData?(value5));
@@ -30727,7 +_,9 @@
 				value6.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
-			if (drawPlayer.face > 0 && drawPlayer.face < 9)
+			goto layerLoopContinue;
+			faceLayer:
+			if (drawPlayer.face > 0)
 			{
 				DrawData value7;
 				if (drawPlayer.face == 7)
@@ -30742,6 +_,8 @@
 				value7.Draw(Main.spriteBatch);
 				Main.pixelShader.CurrentTechnique.Passes[0].Apply();
 			}
+			goto layerLoopContinue;
+			postDraw:
 			drawPlayer.position = position;
 			drawPlayer.bodyFrame.Y = bodyFrame.Y;
 		}
@@ -30766,6 +_,11 @@
 
 		public void DrawPlayer(Player drawPlayer, Vector2 Position, float rotation, Vector2 rotationOrigin, float shadow = 0f)
 		{
+			//prepare for code more ugly than DrawPlayerHead
+ 			PlayerDrawInfo drawInfo = new PlayerDrawInfo();
+			drawInfo.drawPlayer = drawPlayer;
+			drawInfo.position = Position;
+			drawInfo.shadow = shadow;
 			bool arg_06_0 = drawPlayer.controlDown;
 			float num = 0f;
 			DrawData value = default(DrawData);
@@ -30774,6 +_,7 @@
 			Main.playerDrawDust.Clear();
 			Main.playerDrawGore.Clear();
 			Vector2 value2 = Position + (drawPlayer.itemLocation - drawPlayer.position);
+			drawInfo.itemLocation = value2;
 			int num2 = 0;
 			bool flag = false;
 			bool flag2 = false;
@@ -30787,6 +_,9 @@
 			{
 				flag2 = true;
 			}
+			ItemLoader.DrawHands(drawPlayer, ref flag, ref flag2);
+			drawInfo.drawHands = flag;
+			drawInfo.drawArms = flag2;
 			int num3;
 			if (drawPlayer.heldProj >= 0 && shadow == 0f)
 			{
@@ -30795,7 +_,9 @@
 				{
 					flag3 = true;
 				}
-			}
+				ProjectileLoader.DrawHeldProjInFrontOfHeldItemAndArms(Main.projectile[drawPlayer.heldProj], ref flag3);
+			}
+			drawInfo.drawHeldProjInFrontOfHeldItemAndBody = flag3;
 			bool flag4 = false;
 			if (drawPlayer.head == 10 || drawPlayer.head == 12 || drawPlayer.head == 28 || drawPlayer.head == 62 || drawPlayer.head == 97 || drawPlayer.head == 106 || drawPlayer.head == 113 || drawPlayer.head == 116 || drawPlayer.head == 119 || drawPlayer.head == 133 || drawPlayer.head == 138 || drawPlayer.head == 139 || drawPlayer.head == 163 || drawPlayer.head == 178 || drawPlayer.head == 181 || drawPlayer.head == 191 || drawPlayer.head == 198)
 			{
@@ -30806,6 +_,9 @@
 			{
 				flag5 = true;
 			}
+			ItemLoader.DrawHair(drawPlayer, ref flag4, ref flag5);
+			drawInfo.drawHair = flag4;
+			drawInfo.drawAltHair = flag5;
 			bool flag6 = false;
 			if (drawPlayer.face == 4 || drawPlayer.face == 3 || drawPlayer.face == 2)
 			{
@@ -30816,18 +_,22 @@
 			{
 				num4 = 1;
 			}
+			drawInfo.hairShader = num4;
 			float num5 = (float)drawPlayer.mount.PlayerOffset;
 			Position.Y -= num5;
+			drawInfo.position = Position;
 			int num6 = 0;
 			if (drawPlayer.dye[0] != null)
 			{
 				num6 = (int)drawPlayer.dye[0].dye;
 			}
+			drawInfo.headArmorShader = num6;
 			int num7 = 0;
 			if (drawPlayer.dye[1] != null)
 			{
 				num7 = (int)drawPlayer.dye[1].dye;
 			}
+			drawInfo.bodyArmorShader = num7;
 			int shader = 0;
 			if (drawPlayer.dye[2] != null)
 			{
@@ -30837,6 +_,7 @@
 			{
 				shader = num7;
 			}
+			drawInfo.legArmorShader = shader;
 			int shader2 = 0;
 			int shader3 = 0;
 			int shader4 = 0;
@@ -30854,53 +_,65 @@
 				int num8 = i % 10;
 				if (drawPlayer.dye[num8] != null && drawPlayer.armor[i].type > 0 && drawPlayer.armor[i].stack > 0 && (i / 10 >= 1 || !drawPlayer.hideVisual[num8] || drawPlayer.armor[i].wingSlot > 0 || drawPlayer.armor[i].type == 934))
 				{
-					if (drawPlayer.armor[i].handOnSlot > 0 && drawPlayer.armor[i].handOnSlot < 20)
+					if (drawPlayer.armor[i].handOnSlot > 0)
 					{
 						shader2 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].handOffSlot > 0 && drawPlayer.armor[i].handOffSlot < 12)
+						drawInfo.handOnShader = shader2;
+					}
+					if (drawPlayer.armor[i].handOffSlot > 0)
 					{
 						shader3 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].backSlot > 0 && drawPlayer.armor[i].backSlot < 14)
+						drawInfo.handOffShader = shader3;
+					}
+					if (drawPlayer.armor[i].backSlot > 0)
 					{
 						shader4 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].frontSlot > 0 && drawPlayer.armor[i].frontSlot < 5)
+						drawInfo.backShader = shader4;
+					}
+					if (drawPlayer.armor[i].frontSlot > 0)
 					{
 						shader5 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].shoeSlot > 0 && drawPlayer.armor[i].shoeSlot < 18)
+						drawInfo.frontShader = shader5;
+					}
+					if (drawPlayer.armor[i].shoeSlot > 0)
 					{
 						shader6 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].waistSlot > 0 && drawPlayer.armor[i].waistSlot < 13)
+						drawInfo.shoeShader = shader6;
+					}
+					if (drawPlayer.armor[i].waistSlot > 0)
 					{
 						shader7 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].shieldSlot > 0 && drawPlayer.armor[i].shieldSlot < 7)
+						drawInfo.waistShader = shader7;
+					}
+					if (drawPlayer.armor[i].shieldSlot > 0)
 					{
 						shader8 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].neckSlot > 0 && drawPlayer.armor[i].neckSlot < 10)
+						drawInfo.shieldShader = shader8;
+					}
+					if (drawPlayer.armor[i].neckSlot > 0)
 					{
 						shader9 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].faceSlot > 0 && drawPlayer.armor[i].faceSlot < 9)
+						drawInfo.neckShader = shader9;
+					}
+					if (drawPlayer.armor[i].faceSlot > 0)
 					{
 						shader10 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].balloonSlot > 0 && drawPlayer.armor[i].balloonSlot < 18)
+						drawInfo.faceShader = shader10;
+					}
+					if (drawPlayer.armor[i].balloonSlot > 0)
 					{
 						shader11 = (int)drawPlayer.dye[num8].dye;
-					}
-					if (drawPlayer.armor[i].wingSlot > 0 && drawPlayer.armor[i].wingSlot < 40)
+						drawInfo.balloonShader = shader11;
+					}
+					if (drawPlayer.armor[i].wingSlot > 0)
 					{
 						shader12 = (int)drawPlayer.dye[num8].dye;
+						drawInfo.wingShader = shader12;
 					}
 					if (drawPlayer.armor[i].type == 934)
 					{
 						shader13 = (int)drawPlayer.dye[num8].dye;
+						drawInfo.carpetShader = shader13;
 					}
 				}
 			}
@@ -30915,32 +_,54 @@
 			SpriteEffects spriteEffects = SpriteEffects.None;
 			SpriteEffects effect = SpriteEffects.FlipHorizontally;
 			Microsoft.Xna.Framework.Color color = drawPlayer.GetImmuneAlpha(drawPlayer.GetHairColor(true), shadow);
+			drawInfo.hairColor = color;
 			Microsoft.Xna.Framework.Color color2 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.eyeWhiteColor = color2;
 			Microsoft.Xna.Framework.Color color3 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.eyeColor), shadow);
+			drawInfo.eyeColor = color3;
 			Microsoft.Xna.Framework.Color color4 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.25) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.faceColor = color4;
 			Microsoft.Xna.Framework.Color color5 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.bodyColor = color5;
 			Microsoft.Xna.Framework.Color color6 = drawPlayer.GetImmuneAlpha(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.skinColor), shadow);
+			drawInfo.legColor = color6;
 			Microsoft.Xna.Framework.Color color7 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.shirtColor), shadow);
+			drawInfo.shirtColor = color7;
 			Microsoft.Xna.Framework.Color color8 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0), drawPlayer.underShirtColor), shadow);
+			drawInfo.underShirtColor = color8;
 			Microsoft.Xna.Framework.Color color9 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.pantsColor), shadow);
+			drawInfo.pantsColor = color9;
 			Microsoft.Xna.Framework.Color color10 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.75) / 16.0), drawPlayer.shoeColor), shadow);
+			drawInfo.shoeColor = color10;
 			Microsoft.Xna.Framework.Color color11 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.25) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.upperArmorColor = color11;
 			Microsoft.Xna.Framework.Color color12 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.5) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.middleArmorColor = color12;
 			Microsoft.Xna.Framework.Color color13 = color12;
+			drawInfo.mountColor = color13;
 			Microsoft.Xna.Framework.Color color14 = drawPlayer.GetImmuneAlphaPure(Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)((double)Position.Y + (double)drawPlayer.height * 0.75) / 16, Microsoft.Xna.Framework.Color.White), shadow);
+			drawInfo.lowerArmorColor = color14;
 			Microsoft.Xna.Framework.Color color15 = new Microsoft.Xna.Framework.Color(255, 255, 255, 100);
 			int num9 = 0;
 			int num10 = 0;
 			int num11 = 0;
 			int num12 = 0;
 			int num13 = -1;
+			drawInfo.headGlowMask = num13;
 			int num14 = -1;
+			drawInfo.bodyGlowMask = num14;
 			int num15 = -1;
+			drawInfo.armGlowMask = num15;
 			int num16 = -1;
+			drawInfo.legGlowMask = num16;
 			Microsoft.Xna.Framework.Color color16 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = color16;
 			Microsoft.Xna.Framework.Color color17 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = color17;
 			Microsoft.Xna.Framework.Color color18 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.armGlowMaskColor = color18;
 			Microsoft.Xna.Framework.Color color19 = Microsoft.Xna.Framework.Color.Transparent;
+			drawInfo.legGlowMaskColor = color19;
 			num3 = drawPlayer.head;
 			switch (num3)
 			{
@@ -31002,6 +_,7 @@
 			underShirtColor.A = 180;
 			if (drawPlayer.head == 169)
 			{
+				//patch file: num13, color16
 				num13 = 15;
 				byte b = (byte)(62.5f * (float)(1 + num9));
 				color16 = new Microsoft.Xna.Framework.Color((int)b, (int)b, (int)b, 0);
@@ -31057,14 +_,17 @@
 			}
 			if (drawPlayer.body == 175)
 			{
+				//patch file: num14
 				if (drawPlayer.Male)
 				{
 					num14 = 13;
 				}
+				//patch file
 				else
 				{
 					num14 = 18;
 				}
+				//patch file: color17
 				byte b6 = (byte)(62.5f * (float)(1 + num9));
 				color17 = new Microsoft.Xna.Framework.Color((int)b6, (int)b6, (int)b6, 0);
 			}
@@ -31093,6 +_,7 @@
 					num14 = 186;
 				}
 				num15 = 188;
+				//patch file: num15, color18
 				byte b7 = (byte)(62.5f * (float)(1 + num12));
 				color17 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
 				color18 = new Microsoft.Xna.Framework.Color((int)b7, (int)b7, (int)b7, 0);
@@ -31141,6 +_,7 @@
 			}
 			if (drawPlayer.legs == 111)
 			{
+				//patch file: num17, color19
 				num16 = 17;
 				byte b10 = (byte)(62.5f * (float)(1 + num10));
 				color19 = new Microsoft.Xna.Framework.Color((int)b10, (int)b10, (int)b10, 0);
@@ -31178,6 +_,10 @@
 				color19 = new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 0);
 				color14 = drawPlayer.GetImmuneAlphaPure(new Microsoft.Xna.Framework.Color((int)b13, (int)b13, (int)b13, 255), shadow);
 			}
+			ItemLoader.DrawArmorColor(EquipType.Head, drawPlayer.head, drawPlayer, shadow, ref color11, ref num13, ref color16);
+			ItemLoader.DrawArmorColor(EquipType.Body, drawPlayer.body, drawPlayer, shadow, ref color12, ref num14, ref color17);
+			ItemLoader.ArmorArmGlowMask(drawPlayer.body, drawPlayer, shadow, ref num15, ref color18);
+			ItemLoader.DrawArmorColor(EquipType.Legs, drawPlayer.legs, drawPlayer, shadow, ref color14, ref num16, ref color19);
 			color16 = drawPlayer.GetImmuneAlphaPure(color16, shadow);
 			color17 = drawPlayer.GetImmuneAlphaPure(color17, shadow);
 			color18 = drawPlayer.GetImmuneAlphaPure(color18, shadow);
@@ -31643,9 +_,11 @@
 				Main.dust[num44].position = Vector2.Lerp(Main.dust[num44].position, drawPlayer.Center, 0.5f);
 				Main.playerDrawDust.Add(num44);
 			}
+			bool fullBright = false;
+			PlayerHooks.DrawEffects(drawInfo, ref num19, ref num20, ref num21, ref num22, ref fullBright);
 			if (num19 != 1f || num20 != 1f || num21 != 1f || num22 != 1f)
 			{
-				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn)
+				if (drawPlayer.onFire || drawPlayer.onFire2 || drawPlayer.onFrostBurn || fullBright)
 				{
 					color2 = drawPlayer.GetImmuneAlpha(Microsoft.Xna.Framework.Color.White, shadow);
 					color3 = drawPlayer.GetImmuneAlpha(drawPlayer.eyeColor, shadow);
@@ -31829,6 +_,27 @@
 				color18 = Microsoft.Xna.Framework.Color.Multiply(color18, num50);
 				color19 = Microsoft.Xna.Framework.Color.Multiply(color19, num50);
 			}
+			drawInfo.hairColor = color;
+			drawInfo.eyeWhiteColor = color2;
+			drawInfo.eyeColor = color3;
+			drawInfo.faceColor = color4;
+			drawInfo.bodyColor = color5;
+			drawInfo.legColor = color6;
+			drawInfo.shirtColor = color7;
+			drawInfo.underShirtColor = color8;
+			drawInfo.pantsColor = color9;
+			drawInfo.shoeColor = color10;
+			drawInfo.upperArmorColor = color11;
+			drawInfo.middleArmorColor = color12;
+			drawInfo.lowerArmorColor = color14;
+			drawInfo.headGlowMask = num13;
+			drawInfo.bodyGlowMask = num14;
+			drawInfo.armGlowMask = num15;
+			drawInfo.legGlowMask = num16;
+			drawInfo.headGlowMaskColor = color16;
+			drawInfo.bodyGlowMaskColor = color17;
+			drawInfo.armGlowMaskColor = color18;
+			drawInfo.legGlowMaskColor = color19;
 			if (drawPlayer.gravDir == 1f)
 			{
 				if (drawPlayer.direction == 1)
@@ -31867,9 +_,13 @@
 					drawPlayer.bodyPosition.Y = 6f;
 				}
 			}
+			drawInfo.spriteEffects = spriteEffects;
 			Vector2 vector2 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.75f);
+			drawInfo.legOrigin = vector2;
 			Vector2 origin = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.5f);
+			drawInfo.bodyOrigin = origin;
 			Vector2 vector3 = new Vector2((float)drawPlayer.legFrame.Width * 0.5f, (float)drawPlayer.legFrame.Height * 0.4f);
+			drawInfo.headOrigin = vector3;
 			if ((drawPlayer.merman || drawPlayer.forceMerman) && !drawPlayer.hideMerman)
 			{
 				drawPlayer.headRotation = drawPlayer.velocity.Y * (float)drawPlayer.direction * 0.1f;
@@ -31899,6 +_,185 @@
 			{
 				flag7 = true;
 			}
+			goto heldItemColor;
+			postSetupVars:
+			PlayerHooks.ModifyDrawInfo(ref drawInfo);
+			List<PlayerLayer> drawLayers = PlayerHooks.GetDrawLayers(drawPlayer);
+			int layerIndex = -1;
+			layerLoopContinue:
+			layerIndex++;
+			Position = drawInfo.position;
+			shadow = drawInfo.shadow;
+			value2 = drawInfo.itemLocation;
+			flag = drawInfo.drawHands;
+			flag2 = drawInfo.drawArms;
+			flag3 = drawInfo.drawHeldProjInFrontOfHeldItemAndBody;
+			flag4 = drawInfo.drawHair;
+			flag5 = drawInfo.drawAltHair;
+			num4 = drawInfo.hairShader;
+			num6 = drawInfo.headArmorShader;
+			num7 = drawInfo.bodyArmorShader;
+			shader = drawInfo.legArmorShader;
+			shader2 = drawInfo.handOnShader;
+			shader3 = drawInfo.handOffShader;
+			shader4 = drawInfo.backShader;
+			shader5 = drawInfo.frontShader;
+			shader6 = drawInfo.shoeShader;
+			shader7 = drawInfo.waistShader;
+			shader8 = drawInfo.shieldShader;
+			shader9 = drawInfo.neckShader;
+			shader10 = drawInfo.faceShader;
+			shader11 = drawInfo.balloonShader;
+			shader12 = drawInfo.wingShader;
+			shader13 = drawInfo.carpetShader;
+			color = drawInfo.hairColor;
+			color2 = drawInfo.eyeWhiteColor;
+			color3 = drawInfo.eyeColor;
+			color4 = drawInfo.faceColor;
+			color5 = drawInfo.bodyColor;
+			color6 = drawInfo.legColor;
+			color7 = drawInfo.shirtColor;
+			color8 = drawInfo.underShirtColor;
+			color9 = drawInfo.pantsColor;
+			color10 = drawInfo.shoeColor;
+			color11 = drawInfo.upperArmorColor;
+			color12 = drawInfo.middleArmorColor;
+			color13 = drawInfo.mountColor;
+			color14 = drawInfo.lowerArmorColor;
+			num13 = drawInfo.headGlowMask;
+			num14 = drawInfo.bodyGlowMask;
+			num15 = drawInfo.armGlowMask;
+			num16 = drawInfo.legGlowMask;
+			color16 = drawInfo.headGlowMaskColor;
+			color17 = drawInfo.bodyGlowMaskColor;
+			color18 = drawInfo.armGlowMaskColor;
+			color19 = drawInfo.legGlowMaskColor;
+			spriteEffects = drawInfo.spriteEffects;
+			vector2 = drawInfo.legOrigin;
+			origin = drawInfo.bodyOrigin;
+			vector3 = drawInfo.headOrigin;
+			if (layerIndex >= drawLayers.Count)
+			{
+				goto postDraw;
+			}
+			if (!drawLayers[layerIndex].ShouldDraw(drawLayers))
+			{
+				goto layerLoopContinue;
+			}
+			if (drawLayers[layerIndex] == PlayerLayer.HairBack)
+			{
+				goto hairBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MountBack)
+			{
+				goto mountBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsBack)
+			{
+				goto miscEffectsBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.BackAcc)
+			{
+				goto backAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Wings)
+			{
+				goto wingsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.BalloonAcc)
+			{
+				goto balloonAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Skin)
+			{
+				goto skinLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Legs)
+			{
+				goto legsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.ShoeAcc)
+			{
+				goto shoeAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Body)
+			{
+				goto bodyLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOffAcc)
+			{
+				goto handOffAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.WaistAcc)
+			{
+				goto waistAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.NeckAcc)
+			{
+				goto neckAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Face)
+			{
+				goto faceLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Hair)
+			{
+				goto hairLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Head)
+			{
+				goto headLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.FaceAcc)
+			{
+				goto faceAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MountFront)
+			{
+				goto mountFrontLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.ShieldAcc)
+			{
+				goto shieldAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.SolarShield)
+			{
+				goto solarShieldLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjBack)
+			{
+				goto heldProjBackLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldItem)
+			{
+				goto heldItemLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.Arms)
+			{
+				goto armsLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HandOnAcc)
+			{
+				goto handOnAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.HeldProjFront)
+			{
+				goto heldProjFrontLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.FrontAcc)
+			{
+				goto frontAccLayer;
+			}
+			else if (drawLayers[layerIndex] == PlayerLayer.MiscEffectsFront)
+			{
+				goto miscEffectsFrontLayer;
+			}
+			else
+			{
+				drawLayers[layerIndex].Draw(ref drawInfo);
+			}
+			goto layerLoopContinue;
+			hairBackLayer:
 			if (flag6)
 			{
 				bodyFrame.Height = 0;
@@ -31922,6 +_,8 @@
 					bodyFrame.Height = height;
 				}
 			}
+			goto layerLoopContinue;
+			mountBackLayer:
 			if (drawPlayer.mount.Active)
 			{
 				drawPlayer.mount.Draw(Main.playerDrawData, 0, drawPlayer, Position, color13, spriteEffects, shadow);
@@ -31940,6 +_,8 @@
 				Main.playerDrawData.Add(value);
 			}
 			Position.Y += num;
+			goto layerLoopContinue;
+			miscEffectsBackLayer:
 			if (drawPlayer.electrified && shadow == 0f)
 			{
 				Texture2D texture2D = Main.glowMaskTexture[25];
@@ -31960,6 +_,7 @@
 				Microsoft.Xna.Framework.Color color21 = Microsoft.Xna.Framework.Color.Lerp(color12, Microsoft.Xna.Framework.Color.White, 0.7f);
 				Texture2D texture2D2 = Main.extraTexture[74];
 				Texture2D texture = Main.glowMaskTexture[217];
+				// TODO do we need flag8
 				bool flag8 = !drawPlayer.setForbiddenCooldownLocked;
 				int num53 = (int)(((float)drawPlayer.miscCounter / 300f * 6.28318548f).ToRotationVector2().Y * 6f);
 				float num54 = ((float)drawPlayer.miscCounter / 75f * 6.28318548f).ToRotationVector2().X * 4f;
@@ -32020,6 +_,8 @@
 				}
 			}
 			Position.Y -= num;
+			goto layerLoopContinue;
+			backAccLayer:
 			bool flag9 = false;
 			if ((drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170))
 			{
@@ -32079,9 +_,9 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (!flag9 && drawPlayer.back > 0 && drawPlayer.back < 14 && !drawPlayer.mount.Active)
-			{
-				if (drawPlayer.front >= 1 && drawPlayer.front <= 4)
+			if (!flag9 && drawPlayer.back > 0 && !drawPlayer.mount.Active)
+			{
+				if (drawPlayer.front >= 1)
 				{
 					int num62 = drawPlayer.bodyFrame.Y / 56;
 					if (num62 < 1 || num62 > 5)
@@ -32112,6 +_,9 @@
 				value.shader = shader4;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			wingsLayer:
+			flag9 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
 			Position.Y += (float)((int)num5 / 2);
 			if (!flag9 && drawPlayer.wings > 0)
 			{
@@ -32329,6 +_,10 @@
 					}
 				}
 			}
+			Position.Y -= (float)((int)num5 / 2);
+			goto layerLoopContinue;
+			balloonAccLayer:
+			Position.Y += (float)((int)num5 / 2);
 			if (drawPlayer.balloon > 0)
 			{
 				int num70 = DateTime.Now.Millisecond % 800 / 200;
@@ -32346,25 +_,29 @@
 				Main.playerDrawData.Add(value);
 			}
 			Position.Y -= (float)((int)num5 / 2);
+			goto layerLoopContinue;
+			skinLayer:
 			bool flag10 = drawPlayer.body == 82 || drawPlayer.body == 83 || drawPlayer.body == 93 || drawPlayer.body == 21 || drawPlayer.body == 22;
 			bool flag11 = drawPlayer.body == 93 || drawPlayer.legs == 20 || drawPlayer.legs == 21;
-			if (!flag10)
+			if (!flag10 && ItemLoader.DrawBody(drawPlayer)) // TODO this might be wrong, the logic changed
 			{
 				Position.Y += num;
 				value = new DrawData(Main.playerTextures[skinVariant, 3], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 				Position.Y -= num;
 			}
-			if (!flag11 && drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143)
+			if (!flag11 && drawPlayer.legs != 67 && drawPlayer.legs != 106 && drawPlayer.legs != 140 && drawPlayer.legs != 138 && drawPlayer.shoe != 15 && drawPlayer.legs != 143 && ItemLoader.DrawLegs(drawPlayer))
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 10], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color6, drawPlayer.legRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_6F65;
 			}
 			IL_6A97:
+			legsLayer:
 			if (drawPlayer.legs == 140)
 			{
 				if (!drawPlayer.invis && !drawPlayer.mount.Active)
@@ -32392,7 +_,7 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			else if (drawPlayer.legs > 0 && drawPlayer.legs < 161 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
+			else if (drawPlayer.legs > 0 && (drawPlayer.shoe != 15 || drawPlayer.wearsRobe))
 			{
 				if (!drawPlayer.invis)
 				{
@@ -32414,25 +_,29 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 12], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color10, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_7040;
 			}
 			IL_6F65:
-			if (drawPlayer.shoe > 0 && drawPlayer.shoe < 18)
+			shoeAccLayer:
+			if (drawPlayer.shoe > 0)
 			{
 				value = new DrawData(Main.accShoesTexture[(int)drawPlayer.shoe], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color14, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				value.shader = shader6;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
 			if (drawPlayer.wearsRobe)
 			{
 				goto IL_6A97;
 			}
 			IL_7040:
 			Position.Y += num;
+			bodyLayer:
 			bool flag13 = skinVariant == 3 || skinVariant == 8 || skinVariant == 7;
-			if (flag13 && (drawPlayer.body <= 0 || drawPlayer.body >= 210) && !drawPlayer.invis)
+			if (flag13 && drawPlayer.body <= 0 && !drawPlayer.invis)
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 14], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.legFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.legFrame.Height + 4f))) + drawPlayer.legPosition + vector2, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.legFrame), color7, drawPlayer.legRotation, vector2, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
@@ -32464,7 +_,7 @@
 				value.shader = num7;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.body > 0 && drawPlayer.body < 210)
+			if (drawPlayer.body > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame2 = drawPlayer.bodyFrame;
 				int num74 = num2;
@@ -32520,13 +_,17 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 5], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.handoff > 0 && drawPlayer.handoff < 12)
+			goto layerLoopContinue;
+			handOffAccLayer:
+			if (drawPlayer.handoff > 0)
 			{
 				value = new DrawData(Main.accHandsOffTexture[(int)drawPlayer.handoff], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader3;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.waist > 0 && drawPlayer.waist < 13)
+			goto layerLoopContinue;
+			waistAccLayer:
+			if (drawPlayer.waist > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle legFrame = drawPlayer.legFrame;
 				if (legFrame.Y >= 1064)
@@ -32537,13 +_,17 @@
 				value.shader = shader7;
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.neck > 0 && drawPlayer.neck < 10)
+			goto layerLoopContinue;
+			neckAccLayer:
+			if (drawPlayer.neck > 0)
 			{
 				value = new DrawData(Main.accNeckTexture[(int)drawPlayer.neck], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader9;
 				Main.playerDrawData.Add(value);
 			}
-			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135)
+			goto layerLoopContinue;
+			faceLayer:
+			if (!drawPlayer.invis && drawPlayer.head != 38 && drawPlayer.head != 135 && ItemLoader.DrawHead(drawPlayer))
 			{
 				value = new DrawData(Main.playerTextures[skinVariant, 0], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color4, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
@@ -32557,6 +_,8 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			hairLayer:
 			if (flag4)
 			{
 				value = new DrawData(Main.armorHeadTexture[drawPlayer.head], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.headPosition + vector3, new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color11, drawPlayer.headRotation, vector3, 1f, spriteEffects, 0);
@@ -32575,6 +_,8 @@
 				value.shader = -num4;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			headLayer:
 			if (drawPlayer.head == 23)
 			{
 				if (!drawPlayer.invis)
@@ -32610,7 +_,7 @@
 				value.shader = num6;
 				Main.playerDrawData.Add(value);
 			}
-			else if (drawPlayer.head > 0 && drawPlayer.head < 216 && drawPlayer.head != 28)
+			else if (drawPlayer.head > 0 && drawPlayer.head != 28)
 			{
 				if (!drawPlayer.invis || (drawPlayer.head != 39 && drawPlayer.head != 38))
 				{
@@ -32711,7 +_,9 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (drawPlayer.face > 0 && drawPlayer.face < 9)
+			goto layerLoopContinue;
+			faceAccLayer:
+			if (drawPlayer.face > 0)
 			{
 				if (drawPlayer.face == 7)
 				{
@@ -32726,6 +_,8 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			mountFrontLayer:
 			if (drawPlayer.mount.Active)
 			{
 				drawPlayer.mount.Draw(Main.playerDrawData, 2, drawPlayer, Position, color13, spriteEffects, shadow);
@@ -32750,7 +_,9 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
-			if (drawPlayer.shield > 0 && drawPlayer.shield < 7)
+			goto layerLoopContinue;
+			shieldAccLayer:
+			if (drawPlayer.shield > 0)
 			{
 				Vector2 zero = Vector2.Zero;
 				if (drawPlayer.shieldRaised)
@@ -32800,11 +_,13 @@
 					value.shader = shader8;
 					Main.playerDrawData.Add(value);
 				}
+				goto layerLoopContinue;
 				if (drawPlayer.mount.Cart)
 				{
 					Main.playerDrawData.Reverse(Main.playerDrawData.Count - 2, 2);
 				}
 			}
+			solarShieldLayer:
 			Position.Y += (float)((int)num5 / 2);
 			if (drawPlayer.solarShields > 0 && shadow == 0f && !drawPlayer.dead)
 			{
@@ -32821,10 +_,14 @@
 				Main.playerDrawData.Add(value);
 			}
 			Position.Y -= (float)((int)num5 / 2);
+			goto layerLoopContinue;
+			heldProjBackLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && !flag3)
 			{
 				projectileDrawPosition = Main.playerDrawData.Count;
 			}
+			goto layerLoopContinue;
+			heldItemColor:
 			Microsoft.Xna.Framework.Color color37 = Lighting.GetColor((int)((double)Position.X + (double)drawPlayer.width * 0.5) / 16, (int)(((double)Position.Y + (double)drawPlayer.height * 0.5) / 16.0));
 			if (drawPlayer.inventory[drawPlayer.selectedItem].type == 678)
 			{
@@ -32850,6 +_,8 @@
 				float arg_9B53_0 = (1f + num101 * 10f) / 11f;
 				color37 = color37.MultiplyRGBA(new Microsoft.Xna.Framework.Color(Vector4.Lerp(Vector4.One, new Vector4(0f, 0.12f, 0.16f, 0f), 1f - num101)));
 			}
+			goto postSetupVars;
+			heldItemLayer:
 			if (shadow == 0f && !drawPlayer.frozen && ((drawPlayer.itemAnimation > 0 && drawPlayer.inventory[drawPlayer.selectedItem].useStyle != 0) || (drawPlayer.inventory[drawPlayer.selectedItem].holdStyle > 0 && !drawPlayer.pulley)) && drawPlayer.inventory[drawPlayer.selectedItem].type > 0 && !drawPlayer.dead && !drawPlayer.inventory[drawPlayer.selectedItem].noUseGraphic && (!drawPlayer.wet || !drawPlayer.inventory[drawPlayer.selectedItem].noWet))
 			{
 				string arg_9C49_0 = drawPlayer.name;
@@ -32938,6 +_,7 @@
 							zero3 = new Vector2((float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, (float)Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height);
 							num105 -= Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width;
 						}
+						ItemLoader.HoldoutOrigin(drawPlayer, ref zero3);
 						value = new DrawData(Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type], new Vector2((float)((int)(value2.X - Main.screenPosition.X + zero3.X + (float)num105)), (float)((int)(value2.Y - Main.screenPosition.Y + (float)num106))), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Width, Main.itemTexture[drawPlayer.inventory[drawPlayer.selectedItem].type].Height)), drawPlayer.inventory[drawPlayer.selectedItem].GetAlpha(color37), num104, zero3, drawPlayer.inventory[drawPlayer.selectedItem].scale, effect, 0);
 						Main.playerDrawData.Add(value);
 						if (drawPlayer.inventory[drawPlayer.selectedItem].type == 3870)
@@ -33060,7 +_,9 @@
 					}
 				}
 			}
-			if (drawPlayer.body > 0 && drawPlayer.body < 210)
+			goto layerLoopContinue;
+			armsLayer:
+			if (drawPlayer.body > 0)
 			{
 				Microsoft.Xna.Framework.Rectangle bodyFrame5 = drawPlayer.bodyFrame;
 				int num111 = num2;
@@ -33075,6 +_,7 @@
 					if (flag && !drawPlayer.invis)
 					{
 						int arg_B487_0 = drawPlayer.body;
+						//patch file: flag, flag2
 						if (flag2)
 						{
 							value = new DrawData(Main.playerTextures[skinVariant, 7], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color5, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
@@ -33117,7 +_,9 @@
 				value = new DrawData(Main.playerTextures[skinVariant, 13], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color7, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				Main.playerDrawData.Add(value);
 			}
-			if (drawPlayer.handon > 0 && drawPlayer.handon < 20)
+			goto layerLoopContinue;
+			handOnAccLayer:
+			if (drawPlayer.handon > 0)
 			{
 				value = new DrawData(Main.accHandsOnTexture[(int)drawPlayer.handon], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader2;
@@ -33137,17 +_,24 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			heldProjFrontLayer:
 			if (drawPlayer.heldProj >= 0 && shadow == 0f && flag3)
 			{
 				projectileDrawPosition = Main.playerDrawData.Count;
 			}
+			goto layerLoopContinue;
+			frontAccLayer:
 			Position.Y -= num;
-			if (!flag9 && drawPlayer.front > 0 && drawPlayer.front < 5 && !drawPlayer.mount.Active)
+			flag9 = (drawPlayer.wings == 0 || drawPlayer.velocity.Y == 0f) && (drawPlayer.inventory[drawPlayer.selectedItem].type == 1178 || drawPlayer.inventory[drawPlayer.selectedItem].type == 779 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1295 || drawPlayer.inventory[drawPlayer.selectedItem].type == 1910 || drawPlayer.turtleArmor || drawPlayer.body == 106 || drawPlayer.body == 170);
+			if (!flag9 && drawPlayer.front > 0 && !drawPlayer.mount.Active)
 			{
 				value = new DrawData(Main.accFrontTexture[(int)drawPlayer.front], new Vector2((float)((int)(Position.X - Main.screenPosition.X - (float)(drawPlayer.bodyFrame.Width / 2) + (float)(drawPlayer.width / 2))), (float)((int)(Position.Y - Main.screenPosition.Y + (float)drawPlayer.height - (float)drawPlayer.bodyFrame.Height + 4f))) + drawPlayer.bodyPosition + new Vector2((float)(drawPlayer.bodyFrame.Width / 2), (float)(drawPlayer.bodyFrame.Height / 2)), new Microsoft.Xna.Framework.Rectangle?(drawPlayer.bodyFrame), color12, drawPlayer.bodyRotation, origin, 1f, spriteEffects, 0);
 				value.shader = shader5;
 				Main.playerDrawData.Add(value);
 			}
+			goto layerLoopContinue;
+			miscEffectsFrontLayer:
 			if (drawPlayer.frozen && shadow == 0f)
 			{
 				Microsoft.Xna.Framework.Color color43 = color12;
@@ -33282,6 +_,8 @@
 					Main.playerDrawData.Add(value);
 				}
 			}
+			goto layerLoopContinue;
+			postDraw:
 			if (rotation != 0f)
 			{
 				Vector2 value20 = Position - Main.screenPosition + rotationOrigin;
@@ -33379,7 +_,7 @@
 			}
 		}
 
-		protected void DrawItem(Item item, int whoami)
+		public void DrawItem(Item item, int whoami)
 		{
 			int arg_22_0 = (int)((double)item.position.X + (double)item.width * 0.5) / 16;
 			int arg_28_0 = Lighting.offScreenTiles;
@@ -33406,6 +_,11 @@
 			float scale = 1f;
 			Microsoft.Xna.Framework.Color alpha = item.GetAlpha(color);
 			ItemSlot.GetItemLight(ref alpha, ref scale, item, false);
+			if (!ItemLoader.PreDrawInWorld(item, Main.spriteBatch, color, alpha, ref num4, ref scale, whoami))
+			{
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
+				return;
+			}
 			float num5 = (float)(item.height - Main.itemTexture[item.type].Height);
 			float num6 = (float)(item.width / 2 - Main.itemTexture[item.type].Width / 2);
 			if (item.type >= 71 && item.type <= 74)
@@ -33425,6 +_,7 @@
 				int num8 = Main.coinTexture[num7].Height / 8;
 				num6 = (float)(item.width / 2 - Main.coinTexture[num7].Width / 2);
 				Main.spriteBatch.Draw(Main.coinTexture[num7], new Vector2(item.position.X - Main.screenPosition.X + (float)(width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(num8 / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, Main.itemFrame[whoami] * num8 + 1, Main.itemTexture[item.type].Width, num8)), alpha, num4, new Vector2((float)(width / 2), (float)(num8 / 2)), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			if (ItemID.Sets.NebulaPickup[item.type])
@@ -33443,6 +_,7 @@
 				num6 = (float)(item.width / 2 - rectangle.Width / 2);
 				num5 = (float)(item.height - rectangle.Height);
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle), alpha, num4, rectangle.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			if (ItemID.Sets.AnimatesAsSoul[item.type])
@@ -33461,6 +_,7 @@
 				num6 = (float)(item.width / 2 - rectangle2.Width / 2);
 				num5 = (float)(item.height - rectangle2.Height);
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(rectangle2.Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(rectangle2.Height / 2) + num5), new Microsoft.Xna.Framework.Rectangle?(rectangle2), alpha, num4, rectangle2.Size() / 2f, scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			if (item.type == 3858)
@@ -33497,16 +_,25 @@
 					Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 				}
 				Main.spriteBatch.Draw(Main.wireTexture, new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f) + Main.itemTexture[item.type].Size().RotatedBy((double)num4, default(Vector2)) * 0.45f * item.scale, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(4, 58, 8, 8)), alpha, 0f, new Vector2(4f), 1f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			if ((item.type >= 1522 && item.type <= 1527) || item.type == 3643)
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, (int)(Main.mouseTextColor / 2)), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), (float)Main.mouseTextColor / 1000f + 0.8f, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			if (item.type == 3779)
 			{
 				Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
+				return;
+			}
+			if (ItemLoader.animations.Contains(item.type))
+			{
+				ItemLoader.DrawAnimatedItem(item, whoami, color, alpha, num4, scale);
+				ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 				return;
 			}
 			Main.spriteBatch.Draw(Main.itemTexture[item.type], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), alpha, num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
@@ -33518,6 +_,7 @@
 			{
 				Main.spriteBatch.Draw(Main.glowMaskTexture[(int)item.glowMask], new Vector2(item.position.X - Main.screenPosition.X + (float)(Main.itemTexture[item.type].Width / 2) + num6, item.position.Y - Main.screenPosition.Y + (float)(Main.itemTexture[item.type].Height / 2) + num5 + 2f), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.itemTexture[item.type].Width, Main.itemTexture[item.type].Height)), new Microsoft.Xna.Framework.Color(250, 250, 250, item.alpha), num4, new Vector2((float)(Main.itemTexture[item.type].Width / 2), (float)(Main.itemTexture[item.type].Height / 2)), scale, SpriteEffects.None, 0f);
 			}
+			ItemLoader.PostDrawInWorld(item, Main.spriteBatch, color, alpha, num4, scale, whoami);
 		}
 
 		protected void DrawRain()
@@ -33663,7 +_,7 @@
 							}
 						}
 						Microsoft.Xna.Framework.Color color5 = Lighting.GetColor((int)((double)dust.position.X + 4.0) / 16, (int)((double)dust.position.Y + 4.0) / 16);
-						if (dust.type == 6 || dust.type == 15 || (dust.noLight && dust.type < 86 && dust.type > 91) || (dust.type >= 59 && dust.type <= 64))
+						if (dust.type == 6 || dust.type == 15 || (dust.type >= 59 && dust.type <= 64))
 						{
 							color5 = Microsoft.Xna.Framework.Color.White;
 						}
@@ -33671,6 +_,12 @@
 						if (dust.type == 213)
 						{
 							scale = 1f;
+						}
+						ModDust modDust = ModDust.GetDust(dust.type);
+						if (modDust != null)
+						{
+							modDust.Draw(dust, color5, scale);
+							continue;
 						}
 						Main.spriteBatch.Draw(Main.dustTexture, dust.position - Main.screenPosition, new Microsoft.Xna.Framework.Rectangle?(dust.frame), color5, dust.rotation, new Vector2(4f, 4f), scale, SpriteEffects.None, 0f);
 						if (dust.color != default(Microsoft.Xna.Framework.Color))
@@ -34287,7 +_,7 @@
 			for (int j = 0; j < 22; j++)
 			{
 				int num6 = Main.player[Main.myPlayer].buffType[j];
-				if (Main.debuff[num6] && Main.player[Main.myPlayer].buffTime[j] > 5 && num6 != 28 && num6 != 34 && num6 != 87 && num6 != 89 && num6 != 21 && num6 != 86 && num6 != 199)
+				if (Main.debuff[num6] && Main.player[Main.myPlayer].buffTime[j] > 5 && BuffLoader.CanBeCleared(num6))
 				{
 					num5 += 1000;
 				}
@@ -34584,6 +_,7 @@
 					focusText = Lang.inter[54].Value + " (" + text2 + ")";
 				}
 			}
+			NPCLoader.SetChatButtons(ref focusText, ref focusText2);
 			if (!flag)
 			{
 				Main.DrawNPCChatButtons(num, color2, num2, focusText, focusText2);
@@ -34943,7 +_,7 @@
 										for (int l = 0; l < 22; l++)
 										{
 											int num24 = Main.player[Main.myPlayer].buffType[l];
-											if (Main.debuff[num24] && Main.player[Main.myPlayer].buffTime[l] > 0 && num24 != 28 && num24 != 34 && num24 != 87 && num24 != 89 && num24 != 21 && num24 != 86 && num24 != 199)
+											if (Main.debuff[num24] && Main.player[Main.myPlayer].buffTime[l] > 0 && BuffLoader.CanBeCleared(num24))
 											{
 												Main.player[Main.myPlayer].DelBuff(l);
 												l = -1;
@@ -34999,6 +_,7 @@
 								Main.PlaySound(12, -1, -1, 1, 1f, 0f);
 								return;
 							}
+							NPCLoader.OnChatButtonClicked(true);
 						}
 					}
 					else if (Main.npcChatFocus3 && Main.player[Main.myPlayer].talkNPC >= 0)
@@ -35058,6 +_,7 @@
 							Main.HelpText();
 							Main.npcChatText = Lang.BartenderHelpText(Main.npc[Main.player[Main.myPlayer].talkNPC]);
 						}
+						NPCLoader.OnChatButtonClicked(false);
 					}
 				}
 			}
@@ -36133,14 +_,13 @@
 							int num31 = (int)(Main.player[Main.myPlayer].manaSickReduction * 100f) + 1;
 							Main.buffString = Main.buffString + num31 + "%";
 						}
+						int rare = 0;
 						if (Main.meleeBuff[num30])
 						{
-							this.MouseTextHackZoom(Lang.GetBuffName(num30), -10, 0);
-						}
-						else
-						{
-							this.MouseTextHackZoom(Lang.GetBuffName(num30));
-						}
+							rare = -10;
+						}
+						BuffLoader.ModifyBuffTip(num30, ref Main.buffString, ref rare);
+						this.MouseTextHackZoom(Lang.GetBuffName(num30), rare, 0);
 					}
 				}
 			}
@@ -36640,11 +_,13 @@
 							if (Main.mouseLeftRelease && Main.mouseLeft && Main.player[Main.myPlayer].BuyItem(num62, -1))
 							{
 								bool favorited = Main.reforgeItem.favorited;
+								ItemLoader.PreReforge(Main.reforgeItem);
 								Main.reforgeItem.netDefaults(Main.reforgeItem.netID);
 								Main.reforgeItem.Prefix(-2);
 								Main.reforgeItem.position.X = Main.player[Main.myPlayer].position.X + (float)(Main.player[Main.myPlayer].width / 2) - (float)(Main.reforgeItem.width / 2);
 								Main.reforgeItem.position.Y = Main.player[Main.myPlayer].position.Y + (float)(Main.player[Main.myPlayer].height / 2) - (float)(Main.reforgeItem.height / 2);
 								Main.reforgeItem.favorited = favorited;
+								ItemLoader.PostReforge(Main.reforgeItem);
 								ItemText.NewText(Main.reforgeItem, Main.reforgeItem.stack, true, false);
 								Main.PlaySound(SoundID.Item37, -1, -1);
 							}
@@ -36714,6 +_,7 @@
 							{
 								num73++;
 								Main.spriteBatch.DrawString(Main.fontMouseText, Lang.GetMapObjectName(MapHelper.TileToLookup(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74], 0)), new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+								// TODO: investigate this new thing: Main.spriteBatch.DrawString(Main.fontMouseText, Lang.mapLegend.FromType(Main.recipe[Main.availableRecipe[num72]].requiredTile[num74]), new Vector2((float)num70, (float)(num71 + 118 + num75)), color3, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
 								num74++;
 							}
 						}
@@ -37350,6 +_,8 @@
 			r.Create();
 			if (Main.mouseItem.type > 0 || r.createItem.type > 0)
 			{
+				RecipeHooks.OnCraft(Main.mouseItem, r);
+				ItemLoader.OnCraft(Main.mouseItem, r);
 				Main.PlaySound(7, -1, -1, 1, 1f, 0f);
 			}
 		}
@@ -38028,6 +_,7 @@
 				if (num4 > 0)
 				{
 					Main.buffString = Lang.GetBuffDescription(num4);
+					int rare = 0;
 					if (num4 == 26 && Main.expertMode)
 					{
 						Main.buffString = Language.GetTextValue("BuffDescription.WellFed_Expert");
@@ -38043,10 +_,10 @@
 					}
 					if (Main.meleeBuff[num4])
 					{
-						this.MouseTextHackZoom(Lang.GetBuffName(num4), -10, 0);
-						return;
-					}
-					this.MouseTextHackZoom(Lang.GetBuffName(num4));
+						rare = -10;
+					}
+					BuffLoader.ModifyBuffTip(num4, ref Main.buffString, ref rare);
+					this.MouseTextHackZoom(Lang.GetBuffName(num4), rare);
 				}
 			}
 		}
@@ -39475,7 +_,9 @@
 				this.SetupDrawInterfaceLayers();
 			}
 			PlayerInput.SetZoom_UI();
-			foreach (GameInterfaceLayer current in this._gameInterfaceLayers)
+			List<GameInterfaceLayer> interfaceLayers = new List<GameInterfaceLayer>(this._gameInterfaceLayers);
+			ModHooks.ModifyInterfaceLayers(interfaceLayers);
+			foreach (GameInterfaceLayer current in interfaceLayers)
 			{
 				if (!current.Draw())
 				{
@@ -39753,6 +_,8 @@
 
 		private void DrawInterface_33_MouseText()
 		{
+			// TODO - UI Sorting and selective disable support -  move this to new one between 32 and 33
+			ModLoader.ModHooks.PostDrawInterface(Main.spriteBatch);
 			if (Main.mouseItem.stack <= 0)
 			{
 				Main.mouseItem.type = 0;
@@ -39889,6 +_,7 @@
 
 		private static void DrawInterface_26_InterfaceLogic3()
 		{
+			bool wasOpen = Main.playerInventory;
 			if (Main.player[Main.myPlayer].dead)
 			{
 				Main.playerInventory = false;
@@ -39900,7 +_,10 @@
 				{
 					Main.InGuideCraftMenu = false;
 				}
-				Recipe.FindRecipes();
+				if (wasOpen)
+				{
+					Recipe.FindRecipes();
+				}
 				Main.InReforgeMenu = false;
 			}
 			Main.hoverItemName = "";
@@ -40424,6 +_,11 @@
 							if (type == 439 || type == 370)
 							{
 								scale = 1.5f;
+							}
+							if (!NPCLoader.DrawHealthBar(Main.npc[i], ref scale))
+							{
+								Main.npc[i].position -= Main.npc[i].visualOffset;
+								continue;
 							}
 							if ((!Main.expertMode || type != 266) && ((type != 439 && type != 440) || Main.npc[i].ai[0] != 5f))
 							{
@@ -41493,6 +_,7 @@
 						else
 						{
 							text2 = Language.GetTextValue("GameUI.OreDetected", Lang.GetMapObjectName(MapHelper.TileToLookup(Main.player[Main.myPlayer].bestOre, 0)));
+							// TODO adapt to new way: text2 = Language.GetTextValue("GameUI.OreDetected", Lang.mapLegend.FromType(Main.player[Main.myPlayer].bestOre));
 						}
 						flag10 = true;
 					}
@@ -43092,7 +_,7 @@
 				if (this.selectedMenu >= 1)
 				{
 					LanguageManager.Instance.SetLanguage(this.selectedMenu);
-					Main.menuMode = 0;
+					Main.menuMode = ModLoader.Interface.loadModsID;;
 					Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 					Main.SaveSettings();
 				}
@@ -43261,7 +_,7 @@
 			}
 			else
 			{
-				if (Main.netMode == 1 || Main.menuMode == 14)
+				if (Main.netMode == 1 && menuMode < 10000 && menuMode != 888 || Main.menuMode == 14)
 				{
 					num5 = 2;
 					array9[0] = Main.statusText;
@@ -43401,9 +_,9 @@
 							text = text + " -world \"" + Main.worldPathName + "\"";
 						}
 #if WINDOWS
-						this.tServer.StartInfo.FileName = "TerrariaServer.exe";
+						this.tServer.StartInfo.FileName = "tModLoaderServer.exe";
 #else
-						this.tServer.StartInfo.FileName = "TerrariaServer";
+						this.tServer.StartInfo.FileName = "tModLoaderServer";
 #endif
 						this.tServer.StartInfo.Arguments = text;
 						if (Main.libPath != "")
@@ -43533,17 +_,26 @@
 				{
 					num5 = 3;
 					array9[0] = Lang.menu[9].Value;
+					if (WorldIO.customDataFail != null)
+					{
+						array9[0] = WorldIO.customDataFail.modName + " " + array9[0];
+					}
 					array[0] = true;
 					num2 -= 30;
 					array4[1] = 70;
 					array4[2] = 50;
 					array9[1] = Lang.menu[10].Value;
 					array9[2] = Lang.menu[6].Value;
+					if (WorldIO.customDataFail != null)
+					{
+						array9[2] = "View Error";
+					}
 					if (this.selectedMenu == 1)
 					{
 						if (FileUtilities.Exists(Main.worldPathName + ".bak", Main.ActiveWorldFileData.IsCloudSave))
 						{
 							FileUtilities.Move(Main.worldPathName + ".bak", Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave, true);
+							WorldIO.LoadBackup(Main.worldPathName, Main.ActiveWorldFileData.IsCloudSave);
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							WorldGen.playWorld();
 							Main.menuMode = 10;
@@ -43559,7 +_,14 @@
 					{
 						flag5 = false;
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
-						Main.menuMode = 0;
+						if (WorldIO.customDataFail == null)
+						{
+							Main.menuMode = 0;
+						}
+						else
+						{
+							ErrorLogger.LogException(WorldIO.customDataFail.InnerException);
+						}
 						Main.netMode = 0;
 					}
 				}
@@ -43567,6 +_,10 @@
 				{
 					num5 = 3;
 					array9[0] = Lang.menu[9].Value;
+					if (WorldIO.customDataFail != null)
+					{
+						array9[0] = WorldIO.customDataFail.modName + " " + array9[0];
+					}
 					array[0] = true;
 					array[1] = true;
 					num2 -= 30;
@@ -43574,10 +_,22 @@
 					array4[2] = 50;
 					array9[1] = Lang.menu[11].Value;
 					array9[2] = Lang.menu[5].Value;
+					if (WorldIO.customDataFail != null)
+					{
+						array9[2] = "View Error";
+					}
 					if (this.selectedMenu == 2 || flag5)
 					{
 						flag5 = false;
 						Main.PlaySound(11, -1, -1, 1, 1f, 0f);
+						if (WorldIO.customDataFail == null)
+						{
+							Main.menuMode = 0;
+						}
+						else
+						{
+							ErrorLogger.LogException(WorldIO.customDataFail.InnerException);
+						}
 						Main.menuMode = 0;
 						Main.netMode = 0;
 					}
@@ -43671,6 +_,9 @@
 					{
 						SkyManager.Instance["Slime"].Deactivate(new object[0]);
 					}
+					// tmod added.
+					Filters.Scene.DeactivateAll();
+					SkyManager.Instance.DeactivateAll();
 					int num12 = 0;
 					num5 = 5;
 					num4 = 60;
@@ -43696,6 +_,7 @@
 						Main.menuMode = 888;
 					}
 					num12++;
+					Interface.AddMenuButtons(this, this.selectedMenu, array9, array7, ref num2, ref num4, ref num12, ref num5);
 					array9[num12] = Lang.menu[14].Value;
 					if (this.selectedMenu == num12)
 					{
@@ -44383,6 +_,7 @@
 						num2 = 210;
 						num4 = 37;
 						num5 = 8;
+						num5++; // Room for tModLoader settings option.
 						array4[num5 - 1] = 8;
 						for (int num20 = 0; num20 < num5; num20++)
 						{
@@ -44436,6 +_,13 @@
 						{
 							Main.PlaySound(10, -1, -1, 1, 1f, 0f);
 							Main.menuMode = 1213;
+						}
+						num21++;
+						array9[num21] = "tModLoader " + Lang.menu[14].Value; //"tModLoader Settings"
+						if (this.selectedMenu == num21)
+						{
+							Main.PlaySound(SoundID.MenuOpen);
+							Main.menuMode = Interface.tModLoaderSettingsID;
 						}
 						num21++;
 						array9[num21] = Lang.menu[5].Value;
@@ -45616,6 +_,10 @@
 							WorldGen.setWorldSize();
 						}
 					}
+					else
+					{
+						Interface.ModLoaderMenus(this, this.selectedMenu, array9, array7, array4, ref num2, ref num4, ref num5, ref flag5);
+					}
 				}
 			}
 			IL_5597:
@@ -46217,6 +_,7 @@
 			bool flag11 = false;
 			for (int num94 = 0; num94 < num5; num94++)
 			{
+				//patch file: num5, array9, num94
 				if (array9[num94] != null)
 				{
 					Vector2 origin = Main.fontDeathText.MeasureString(array9[num94]);
@@ -46326,6 +_,7 @@
 						num103 *= array7[num94];
 						if (!array8[num94])
 						{
+							//patch file: array9, array7, array4, num2, num4
 							Main.spriteBatch.DrawString(Main.fontDeathText, array9[num94], new Vector2((float)(num3 + num101 + array5[num94]), (float)(num2 + num4 * num94 + num102) + origin.Y * array7[num94] + (float)array4[num94]), color10, 0f, origin, num103, SpriteEffects.None, 0f);
 						}
 						else
@@ -46498,10 +_,11 @@
 				{
 					num111 = 2;
 				}
-				Vector2 origin3 = Main.fontMouseText.MeasureString(Main.versionNumber);
+				string drawVersion = Main.versionNumber + Environment.NewLine + ModLoader.ModLoader.versionedName;
+				Vector2 origin3 = Main.fontMouseText.MeasureString(drawVersion);
 				origin3.X *= 0.5f;
 				origin3.Y *= 0.5f;
-				Main.spriteBatch.DrawString(Main.fontMouseText, Main.versionNumber, new Vector2(origin3.X + (float)num110 + 10f, (float)Main.screenHeight - origin3.Y + (float)num111 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
+				Main.spriteBatch.DrawString(Main.fontMouseText, drawVersion, new Vector2(origin3.X + (float)num110 + 10f, (float)Main.screenHeight - origin3.Y + (float)num111 - 2f), color12, 0f, origin3, 1f, SpriteEffects.None, 0f);
 			}
 			Vector2 bonus = Main.DrawThickCursor(false);
 			Main.DrawCursor(bonus, false);
@@ -46812,6 +_,7 @@
 			{
 				num9 = 2;
 			}
+			UgBgStyleLoader.ChooseStyle(ref num9);
 			if (num9 != Main.ugBack)
 			{
 				Main.oldUgBack = Main.ugBack;
@@ -47019,6 +_,7 @@
 					array4[5] = 127;
 				}
 				array4[6] = 185 + Main.hellBackStyle;
+				UgBgStyleLoader.FillTextureArray(num10, array4);
 				this.LoadBackground(array4[0]);
 				this.LoadBackground(array4[1]);
 				this.LoadBackground(array4[2]);
@@ -49587,7 +_,12 @@
 				Main.spriteBatch.End();
 				Main.spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.None, RasterizerState.CullCounterClockwise);
 				flag = true;
-				if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
+				Texture2D modTexture = PlayerHooks.GetMapBackgroundImage(Main.player[Main.myPlayer]);
+				if (modTexture != null)
+				{
+					Main.spriteBatch.Draw(modTexture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
+				}
+				else if (Main.screenPosition.Y > (float)((Main.maxTilesY - 232) * 16))
 				{
 					Main.spriteBatch.Draw(this.mapBG3Texture, new Microsoft.Xna.Framework.Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Microsoft.Xna.Framework.Color.White);
 				}
@@ -49771,7 +_,7 @@
 			float num35 = (float)Main.textureMaxHeight * num16;
 			float num36 = num;
 			float num37 = 0f;
-			for (int k = 0; k <= 4; k++)
+			for (int k = 0; k <= Main.mapTargetX - 1; k++)
 			{
 				if ((float)((k + 1) * Main.textureMaxWidth) > num6 && (float)(k * Main.textureMaxWidth) < num6 + num8)
 				{
@@ -50204,6 +_,7 @@
 					}
 					else if (type >= num99 && type < num99 + num100)
 					{
+						//patch file: num91, num92
 						Tile tile5 = Main.tile[num91, num92];
 						if (tile5 != null)
 						{
@@ -50232,6 +_,7 @@
 					else
 					{
 						text = Lang.GetMapObjectName(type);
+						text = Lang._mapLegendCache.FromTile(Main.Map[num91, num92], num91, num92);
 					}
 				}
 				float num112 = (num16 * 0.25f * 2f + 1f) / 3f;
@@ -50403,6 +_,7 @@
 					}
 				}
 				Main.spriteBatch.Draw(Main.mapIconTexture[num145], new Vector2((float)num143, (float)num144), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.mapIconTexture[num145].Width, Main.mapIconTexture[num145].Height)), new Microsoft.Xna.Framework.Color(num146, num146, num146, num146), 0f, default(Vector2), 1f, SpriteEffects.None, 0f);
+				ModLoader.ModHooks.PostDrawFullscreenMap(ref text);
 				Vector2 bonus = Main.DrawThickCursor(false);
 				Main.DrawCursor(bonus, false);
 			}
@@ -50942,6 +_,9 @@
 			Main.tileColor.R = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.R * 7) / 10);
 			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
 			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10);
+
+			ModHooks.ModifySunLight(ref Main.tileColor, ref Main.bgColor);
+
 			Main.backColor = Main.bgColor;
 			Main.trueBackColor = Main.backColor;
 			Lighting.Initialize(true);
@@ -51353,6 +_,7 @@
 				{
 					Main.waterStyle = 0;
 				}
+				WaterStyleLoader.ChooseWaterStyle(ref Main.waterStyle);
 				if (Main.bgStyle != 4 && Main.bloodMoon && !Main.dayTime)
 				{
 					Main.waterStyle = 9;
@@ -51891,6 +_,7 @@
 						Main.liquidAlpha[10] = 1f;
 					}
 				}
+				WaterStyleLoader.UpdateLiquidAlphas();
 			}
 			Main.drewLava = false;
 			if (!Main.drawToScreen)
@@ -51915,9 +_,9 @@
 					this.DrawWater(bg, styleOverride, 1f);
 					return;
 				}
-				for (int i = 0; i < 11; i++)
-				{
-					if (i != 1 && Main.liquidAlpha[i] > 0f)
+				for (int i = 0; i < WaterStyleLoader.WaterStyleCount; i++)
+				{
+					if (i != 1 && i != 11 && Main.liquidAlpha[i] > 0f)
 					{
 						this.DrawWater(bg, i, Main.liquidAlpha[i]);
 					}
@@ -52093,21 +_,23 @@
 						if (Main.waterStyle < 10)
 						{
 							this.DrawWater(bg, 10, Main.liquidAlpha[10]);
-							return;
-						}
-						this.DrawWater(bg, 10, 1f);
-						return;
+						}
+						else
+						{
+							this.DrawWater(bg, 10, 1f);
+						}
 					}
 					else
 					{
 						this.DrawWater(bg, 10, Main.liquidAlpha[10]);
 					}
 				}
+				WaterStyleLoader.DrawWatersToScreen(bg);
 				return;
 			}
 		}
 
-		protected void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
+		protected internal void DrawWater(bool bg = false, int Style = 0, float Alpha = 1f)
 		{
 			if (!Lighting.NotRetro)
 			{
@@ -52683,7 +_,7 @@
 						tile = new Tile();
 						Main.tile[j, i] = tile;
 					}
-					byte wall = tile.wall;
+					ushort wall = tile.wall;
 					if (wall > 0 && !this.FullTile(j, i))
 					{
 						Microsoft.Xna.Framework.Color color = Lighting.GetColor(j, i);
@@ -52691,6 +_,11 @@
 						{
 							this.LoadWall((int)wall);
 							int num9 = (int)(Main.wallFrame[(int)wall] * 180);
+							if (!WallLoader.PreDraw(j, i, wall, Main.spriteBatch))
+							{
+								WallLoader.PostDraw(j, i, wall, Main.spriteBatch);
+								continue;
+							}
 							if (Lighting.NotRetro && !Main.wallLight[(int)wall] && (tile.wall < 88 || tile.wall > 93) && !WorldGen.SolidTile(tile))
 							{
 								Texture2D texture;
@@ -52762,6 +_,7 @@
 									Main.spriteBatch.Draw(Main.wallOutlineTexture, new Vector2((float)(j * 16 - (int)Main.screenPosition.X), (float)(i * 16 - (int)Main.screenPosition.Y + 14)) + zero, new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 14, 16, 2)), color, 0f, Vector2.Zero, 1f, SpriteEffects.None, 0f);
 								}
 							}
+							WallLoader.PostDraw(j, i, wall, Main.spriteBatch);
 						}
 					}
 				}
@@ -54404,7 +_,7 @@
 			}
 		}
 
-		protected void LoadNPC(int i)
+		public void LoadNPC(int i)
 		{
 			if (!Main.NPCLoaded[i] || Main.npcTexture[i] == null)
 			{
@@ -54419,7 +_,7 @@
 			}
 		}
 
-		protected void LoadProjectile(int i)
+		public void LoadProjectile(int i)
 		{
 			if (!Main.projectileLoaded[i])
 			{
@@ -54434,7 +_,7 @@
 			}
 		}
 
-		protected void LoadGore(int i)
+		public void LoadGore(int i)
 		{
 			if (!Main.goreLoaded[i])
 			{
@@ -54449,7 +_,7 @@
 			}
 		}
 
-		protected void LoadWall(int i)
+		public void LoadWall(int i)
 		{
 			if (!Main.wallLoaded[i])
 			{
@@ -54464,7 +_,7 @@
 			}
 		}
 
-		protected void LoadTiles(int i)
+		public void LoadTiles(int i)
 		{
 			if (!Main.tileSetsLoaded[i])
 			{
@@ -54954,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[24], new Vector2((float)(this.bgStart + Main.bgW * num6), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[24], Main.backgroundHeight[24])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+						SurfaceBgStyleLoader.DrawFarTexture();
 						SkyManager.Instance.DrawToDepth(Main.spriteBatch, 5f);
 					}
 				}
@@ -55146,6 +_,7 @@
 								Main.spriteBatch.Draw(Main.backgroundTexture[42], new Vector2((float)(this.bgStart + Main.bgW * num17), (float)this.bgTop), new Microsoft.Xna.Framework.Rectangle?(new Microsoft.Xna.Framework.Rectangle(0, 0, Main.backgroundWidth[42], Main.backgroundHeight[42])), Main.backColor, 0f, default(Vector2), Main.bgScale, SpriteEffects.None, 0f);
 							}
 						}
+						SurfaceBgStyleLoader.DrawMiddleTexture();
 					}
 				}
 				this.cTop = (float)this.bgTop * 1.01f - 150f;
@@ -55182,7 +_,7 @@
 			}
 			if (!Main.mapFullscreen)
 			{
-				for (int num21 = 0; num21 < 10; num21++)
+				for (int num21 = 0; num21 < Main.bgAlpha2.Length; num21++)
 				{
 					if (Main.bgStyle == num21)
 					{
@@ -55843,6 +_,7 @@
 								}
 							}
 						}
+						//patch file: num21
 						if (Main.bgAlpha[num21] > 0f && num21 == 9)
 						{
 							float num44 = (float)Main.backColor.A / 255f;
@@ -56015,6 +_,7 @@
 							}
 							SkyManager.Instance.DrawToDepth(Main.spriteBatch, 1f);
 						}
+						SurfaceBgStyleLoader.DrawCloseBackground(num21);
 					}
 				}
 			}
@@ -56199,6 +_,19 @@
 
 		private void DoDraw(GameTime gameTime)
 		{
+			try
+			{
+				do_Draw(gameTime);
+			}
+			catch (Exception e)
+			{
+				ErrorLogger.LogException(e);
+				throw;
+			}
+		}
+
+		protected void do_Draw(GameTime gameTime)
+		{
 			if (Main._drawCycleCounter == 0uL)
 			{
 				Main._tileFrameSeed = Utils.RandomNextSeed(Main._tileFrameSeed);
@@ -56366,6 +_,7 @@
 							{
 								num6 = 0.5f;
 							}
+							PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref num6);
 							Vector2 vector2 = (Main.MouseScreen - new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f) / (new Vector2((float)Main.screenWidth, (float)Main.screenHeight) / 2f);
 							Vector2 vector3 = vector2;
 							num5 = 48f;
@@ -56398,8 +_,10 @@
 						{
 							num8 = 0;
 						}
-						num3 = (float)(num7 - Main.screenWidth / 2) / 1.25f;
-						num4 = (float)(num8 - Main.screenHeight / 2) / 1.25f;
+						float zoom = .8f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num7 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num8 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1254 && Main.mouseRight)
 					{
@@ -56421,8 +_,10 @@
 						{
 							num10 = 0;
 						}
-						num3 = (float)(num9 - Main.screenWidth / 2) / 1.5f;
-						num4 = (float)(num10 - Main.screenHeight / 2) / 1.5f;
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num9 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num10 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].inventory[Main.player[Main.myPlayer].selectedItem].type == 1299 && Main.player[Main.myPlayer].selectedItem != 58)
 					{
@@ -56444,8 +_,10 @@
 						{
 							num12 = 0;
 						}
-						num3 = (float)(num11 - Main.screenWidth / 2) / 1.5f;
-						num4 = (float)(num12 - Main.screenHeight / 2) / 1.5f;
+						float zoom = 0.6666667f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num11 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num12 - Main.screenHeight / 2) * zoom;
 					}
 					else if (Main.player[Main.myPlayer].scope && Main.mouseRight)
 					{
@@ -56467,8 +_,38 @@
 						{
 							num14 = 0;
 						}
-						num3 = (float)(num13 - Main.screenWidth / 2) / 2f;
-						num4 = (float)(num14 - Main.screenHeight / 2) / 2f;
+						float zoom = 0.5f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						num3 = (float)(num13 - Main.screenWidth / 2) * zoom;
+						num4 = (float)(num14 - Main.screenHeight / 2) * zoom;
+					}
+					else
+					{
+						int mouseXClamped = Main.mouseX;
+						int mouseYClamped = Main.mouseY;
+						if (mouseXClamped > Main.screenWidth)
+						{
+							mouseXClamped = Main.screenWidth;
+						}
+						if (mouseXClamped < 0)
+						{
+							mouseXClamped = 0;
+						}
+						if (mouseYClamped > Main.screenHeight)
+						{
+							mouseYClamped = Main.screenHeight;
+						}
+						if (mouseYClamped < 0)
+						{
+							mouseYClamped = 0;
+						}
+						float zoom = -1f;
+						PlayerHooks.ModifyZoom(Main.player[Main.myPlayer], ref zoom);
+						if (zoom != -1f)
+						{
+							num3 = (float)(mouseXClamped - Main.screenWidth / 2) * zoom;
+							num4 = (float)(mouseYClamped - Main.screenHeight / 2) * zoom;
+						}
 					}
 				}
 				if (float.IsNaN(Main.zoomX))
@@ -56513,6 +_,7 @@
 				}
 				Main.screenPosition.X = (float)((int)Main.screenPosition.X);
 				Main.screenPosition.Y = (float)((int)Main.screenPosition.Y);
+				PlayerHooks.ModifyScreenPosition(Main.player[Main.myPlayer]);
 			}
 			if (!Main.gameMenu && Main.netMode != 2)
 			{
@@ -57265,6 +_,9 @@
 			Main.tileColor.G = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.G * 7) / 10);
 			Main.tileColor.B = (byte)((Main.bgColor.R + Main.bgColor.G + Main.bgColor.B + Main.bgColor.B * 7) / 10);
 			Main.tileColor = SkyManager.Instance.ProcessTileColor(Main.tileColor);
+
+			ModHooks.ModifySunLight(ref Main.tileColor, ref Main.bgColor);
+
 			float num55 = (float)(Main.maxTilesX / 4200);
 			num55 *= num55;
 			Main.atmo = (float)((double)((Main.screenPosition.Y + (float)(Main.screenHeight / 2)) / 16f - (65f + 10f * num55)) / (Main.worldSurface / 5.0));
@@ -57307,6 +_,7 @@
 			{
 				this.Rasterizer = RasterizerState.CullClockwise;
 			}
+			// TODO, figure out which Matrix to transform. Transform = ModHooks.ModifyTransformMatrix(Transform);
 			bool flag = !Main.drawToScreen && Main.netMode != 2 && !Main.gameMenu && !Main.mapFullscreen && Lighting.NotRetro && Filters.Scene.CanCapture();
 			if (flag)
 			{
@@ -57717,6 +_,7 @@
 				IL_4196:
 				TimeLogger.DetailedDrawReset();
 				Main.spriteBatch.End();
+				WorldHooks.PostDrawTiles();
 				TimeLogger.DetailedDrawTime(35);
 				this.SortDrawCacheWorms();
 				this.DrawCachedProjs(this.DrawCacheProjsBehindProjectiles, true);
@@ -58163,6 +_,7 @@
 			{
 				num3 = 0;
 			}
+			SurfaceBgStyleLoader.ChooseStyle(ref num3);
 			int num5 = 30;
 			Main.tranSpeed = 0.05f;
 			if (num3 == 0)
@@ -58437,7 +_,7 @@
 					Main.bgAlpha2[6] = 1f;
 				}
 			}
-			else
+			else if (Main.bgStyle == 0 || Main.bgStyle == 3)
 			{
 				Main.bgAlpha2[0] += Main.tranSpeed;
 				if (Main.bgAlpha2[0] > 1f)
@@ -58475,6 +_,18 @@
 					Main.bgAlpha2[6] = 0f;
 				}
 			}
+			if(Main.bgStyle < SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount)
+			{
+				for (int i = SurfaceBgStyleLoader.vanillaSurfaceBgStyleCount; i < Main.bgAlpha2.Length /*SurfaceBackgroundStyleLoader.SurfaceStyleCount*/; i++)
+				{
+					Main.bgAlpha2[i] -= Main.tranSpeed;
+					if (Main.bgAlpha2[i] < 0f)
+					{
+						Main.bgAlpha2[i] = 0f;
+					}
+				}
+			}
+			SurfaceBgStyleLoader.ModifyFarFades(Main.bgStyle, Main.bgAlpha2, Main.tranSpeed);
 			if (Main.ignoreErrors)
 			{
 				try
@@ -58909,6 +_,16 @@
 					RemoteClient.CheckSection(k, Main.player[k].position, 1);
 				}
 			}
+		}
+
+		public static void NewText(string newText, Microsoft.Xna.Framework.Color color, bool force = false)
+		{
+			NewText(newText, color.R, color.G, color.B, force);
+		}
+
+		public static void NewText(object o, Microsoft.Xna.Framework.Color color = default(Microsoft.Xna.Framework.Color), bool force = false)
+		{
+			NewText(o.ToString(), color.R, color.G, color.B, force);
 		}
 
 		public static void NewText(string newText, byte R = 255, byte G = 255, byte B = 255, bool force = false)
@@ -59727,7 +_,7 @@
 						num++;
 					}
 				}
-				for (int j = 0; j < 580; j++)
+				for (int j = 0; j < Main.townNPCCanSpawn.Length; j++)
 				{
 					Main.townNPCCanSpawn[j] = false;
 				}
@@ -59857,6 +_,7 @@
 						if (Main.npc[k].type == 441)
 						{
 							num24++;
+							//patch file: num25
 						}
 						if (Main.npc[k].type == 550)
 						{
@@ -59884,6 +_,7 @@
 								{
 									if (num27 < 2000000000)
 									{
+										//patch file: num27
 										if (Main.player[l].inventory[m].type == 71)
 										{
 											num27 += Main.player[l].inventory[m].stack;
@@ -60133,6 +_,8 @@
 					{
 						WorldGen.prioritizedTownNPC = 550;
 					}
+					// TODO, see what changed and see if we need to do anything to integrate mod npc
+					NPCLoader.CanTownNPCSpawn(num26, num27);
 				}
 			}
 		}
@@ -60352,7 +_,11 @@
 							return result;
 						}
 						SoundEffectInstance soundEffectInstance = null;
-						if (type == 0)
+						if (SoundLoader.PlayModSound(type, num, num2, num3, ref soundEffectInstance))
+						{
+							// Modders can return null to not play anything (prevent overlap), return the original sound effect (restarts sound), or return a new sound effect instance to allow overlapping sound.
+						}
+						else if (type == 0)
 						{
 							int num7 = Main.rand.Next(3);
 							Main.soundInstanceDig[num7].Stop();
@@ -60969,18 +_,60 @@
 							soundEffectInstance.Pan = num3;
 							Main.trackableSoundInstances[num] = soundEffectInstance;
 						}
+						// TODO, trackable sounds? verify working. return soundEffectInstance
+						else if (type == SoundLoader.customSoundType)
+						{
+							SoundLoader.customSoundInstances[num].Stop();
+							SoundLoader.customSoundInstances[num] = SoundLoader.customSounds[num].CreateInstance();
+							SoundLoader.customSoundInstances[num].Volume = num2;
+							SoundLoader.customSoundInstances[num].Pan = num3;
+							//Main.PlaySoundInstance(SoundLoader.customSoundInstances[num]);
+							soundEffectInstance = SoundLoader.customSoundInstances[num];
+						}
 						if (soundEffectInstance != null)
 						{
 							soundEffectInstance.Pitch += pitchOffset;
 							soundEffectInstance.Volume *= volumeScale;
 							Main.PlaySoundInstance(soundEffectInstance);
 						}
+						if ((type >= 30 && type <= 35) || type == 39)
+						{
+							if (Main.ambientError > 0)
+							{
+								Main.ambientError--;
+							}
+						}
+						else
+						{
+							if (Main.soundError > 0)
+							{
+								Main.soundError--;
+							}
+						}
 						result = soundEffectInstance;
 						return result;
 					}
 				}
 				catch
 				{
+					if ((type >= 30 && type <= 35) || type == 39)
+					{
+						Main.ambientError++;
+						if (Main.ambientError >= 100)
+						{
+							Main.ambientError = 0;
+							Main.ambientVolume = 0f;
+						}
+					}
+					else
+					{
+						Main.soundError++;
+						if (Main.soundError >= 100)
+						{
+							Main.soundError = 0;
+							Main.soundVolume = 0f;
+						}
+					}
 				}
 				return null;
 #if !WINDOWS

